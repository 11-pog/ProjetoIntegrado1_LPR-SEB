
Memorias_e_cartas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029cc  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080054cc  080054cc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054cc  080054cc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080054d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000088  0800555c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800555c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000766b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001612  00000000  00000000  0002771c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00028d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000170a9  00000000  00000000  00029488  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006413  00000000  00000000  00040531  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008293c  00000000  00000000  00046944  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c9280  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000688  00000000  00000000  000c9300  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001f98  00000000  00000000  000c9988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ae8 	.word	0x08002ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002ae8 	.word	0x08002ae8

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 fa17 	bl	800158e <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 fa12 	bl	800158e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f001 fe92 	bl	8001e9c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 fa06 	bl	800158e <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200000b8 	.word	0x200000b8

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 f9f1 	bl	800158e <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 f9ec 	bl	800158e <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f001 fe64 	bl	8001e9c <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 f9cd 	bl	800158e <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	200000b8 	.word	0x200000b8

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 f9b9 	bl	800158e <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 f9b4 	bl	800158e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f001 fe34 	bl	8001e9c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 f9a8 	bl	800158e <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200000b8 	.word	0x200000b8

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 f95d 	bl	800158e <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 f91b 	bl	800158e <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f000 fe98 	bl	80010a0 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 f90a 	bl	800158e <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f000 fe90 	bl	80010a0 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 f902 	bl	800158e <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f000 fe88 	bl	80010a0 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f000 fe10 	bl	80010a0 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08002b00 	.word	0x08002b00
 8000498:	08002b08 	.word	0x08002b08
 800049c:	08002b18 	.word	0x08002b18

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000500:	b082      	sub	sp, #8
 8000502:	b590      	push	{r4, r7, lr}
 8000504:	b089      	sub	sp, #36	; 0x24
 8000506:	af00      	add	r7, sp, #0
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
 800050e:	460b      	mov	r3, r1
 8000510:	80bb      	strh	r3, [r7, #4]
 8000512:	4613      	mov	r3, r2
 8000514:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	4838      	ldr	r0, [pc, #224]	; (80005fc <ST7789_WriteChar+0xfc>)
 800051c:	f001 f837 	bl	800158e <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000520:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000524:	b29a      	uxth	r2, r3
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	b29c      	uxth	r4, r3
 8000530:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000534:	b29a      	uxth	r2, r3
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	b29b      	uxth	r3, r3
 800053c:	3b01      	subs	r3, #1
 800053e:	b29b      	uxth	r3, r3
 8000540:	88b9      	ldrh	r1, [r7, #4]
 8000542:	88f8      	ldrh	r0, [r7, #6]
 8000544:	4622      	mov	r2, r4
 8000546:	f7ff feb1 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	e043      	b.n	80005d8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	3b20      	subs	r3, #32
 8000556:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800055a:	fb01 f303 	mul.w	r3, r1, r3
 800055e:	4619      	mov	r1, r3
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	440b      	add	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	e029      	b.n	80005c6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00e      	beq.n	80005a0 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	743b      	strb	r3, [r7, #16]
 800058c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800058e:	b2db      	uxtb	r3, r3
 8000590:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2102      	movs	r1, #2
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdfd 	bl	8000198 <ST7789_WriteData>
 800059e:	e00f      	b.n	80005c0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80005a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	733b      	strb	r3, [r7, #12]
 80005ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fdec 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	3301      	adds	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
 80005c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80005ca:	461a      	mov	r2, r3
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d3cf      	bcc.n	8000572 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3301      	adds	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005dc:	461a      	mov	r2, r3
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d3b5      	bcc.n	8000550 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <ST7789_WriteChar+0xfc>)
 80005ea:	f000 ffd0 	bl	800158e <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	3724      	adds	r7, #36	; 0x24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005f8:	b002      	add	sp, #8
 80005fa:	4770      	bx	lr
 80005fc:	40010800 	.word	0x40010800

08000600 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000600:	b082      	sub	sp, #8
 8000602:	b580      	push	{r7, lr}
 8000604:	b088      	sub	sp, #32
 8000606:	af04      	add	r7, sp, #16
 8000608:	603a      	str	r2, [r7, #0]
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
 8000610:	460b      	mov	r3, r1
 8000612:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000614:	2200      	movs	r2, #0
 8000616:	2110      	movs	r1, #16
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <ST7789_WriteString+0xb4>)
 800061a:	f000 ffb8 	bl	800158e <HAL_GPIO_WritePin>
	const start_x = x;
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000622:	e035      	b.n	8000690 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	7f3a      	ldrb	r2, [r7, #28]
 8000628:	4413      	add	r3, r2
 800062a:	2bef      	cmp	r3, #239	; 0xef
 800062c:	dc03      	bgt.n	8000636 <ST7789_WriteString+0x36>
				|| *str == '\n') {
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d117      	bne.n	8000666 <ST7789_WriteString+0x66>
			x = start_x;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800063a:	7f7b      	ldrb	r3, [r7, #29]
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	7f7a      	ldrb	r2, [r7, #29]
 8000648:	4413      	add	r3, r2
 800064a:	2bef      	cmp	r3, #239	; 0xef
 800064c:	dc25      	bgt.n	800069a <ST7789_WriteString+0x9a>
				break;
			}

			if (*str == ' ' || *str == '\n') {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b20      	cmp	r3, #32
 8000654:	d003      	beq.n	800065e <ST7789_WriteString+0x5e>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d103      	bne.n	8000666 <ST7789_WriteString+0x66>
				// skip spaces in the beginning of the new line
				str++;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
				continue;
 8000664:	e014      	b.n	8000690 <ST7789_WriteString+0x90>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	88b9      	ldrh	r1, [r7, #4]
 800066c:	88f8      	ldrh	r0, [r7, #6]
 800066e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	f7ff ff40 	bl	8000500 <ST7789_WriteChar>
		x += font.width;
 8000680:	7f3b      	ldrb	r3, [r7, #28]
 8000682:	b29a      	uxth	r2, r3
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4413      	add	r3, r2
 8000688:	80fb      	strh	r3, [r7, #6]
		str++;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1c5      	bne.n	8000624 <ST7789_WriteString+0x24>
 8000698:	e000      	b.n	800069c <ST7789_WriteString+0x9c>
				break;
 800069a:	bf00      	nop
	}
	ST7789_UnSelect();
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <ST7789_WriteString+0xb4>)
 80006a2:	f000 ff74 	bl	800158e <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b0:	b002      	add	sp, #8
 80006b2:	4770      	bx	lr
 80006b4:	40010800 	.word	0x40010800

080006b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f000 fc8d 	bl	8000fdc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f827 	bl	8000714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f000 f89d 	bl	8000804 <MX_GPIO_Init>
	MX_SPI1_Init();
 80006ca:	f000 f865 	bl	8000798 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	ST7789_Init();
 80006ce:	f7ff fe49 	bl	8000364 <ST7789_Init>
	Menu();
 80006d2:	f000 f8f7 	bl	80008c4 <Menu>
	AwaitForAnyButton();
 80006d6:	f000 fab3 	bl	8000c40 <AwaitForAnyButton>
	char difficulty = SelectDifficulty();
 80006da:	f000 f9bb 	bl	8000a54 <SelectDifficulty>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]
	char playerMode = SelectMode();
 80006e2:	f000 fa4b 	bl	8000b7c <SelectMode>
 80006e6:	4603      	mov	r3, r0
 80006e8:	73bb      	strb	r3, [r7, #14]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		char Buttons[3];
		const char toPress[3] = { 10, 11, 12 };
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <main+0x58>)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	8019      	strh	r1, [r3, #0]
 80006f4:	3302      	adds	r3, #2
 80006f6:	0c12      	lsrs	r2, r2, #16
 80006f8:	701a      	strb	r2, [r3, #0]
		DetectButtonPress((char*) toPress, Buttons, 3);
 80006fa:	f107 0108 	add.w	r1, r7, #8
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2203      	movs	r2, #3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fafd 	bl	8000d02 <DetectButtonPress>
		HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fcc9 	bl	80010a0 <HAL_Delay>
	while (1) {
 800070e:	e7ec      	b.n	80006ea <main+0x32>
 8000710:	08002bbc 	.word	0x08002bbc

08000714 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b090      	sub	sp, #64	; 0x40
 8000718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fdc6 	bl	80022b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2310      	movs	r3, #16
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000746:	2300      	movs	r3, #0
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800074a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f000 ff33 	bl	80015c0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x50>
		Error_Handler();
 8000760:	f000 fb32 	bl	8000dc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000774:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f99e 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x7a>
		Error_Handler();
 800078a:	f000 fb1d 	bl	8000dc8 <Error_Handler>
	}
}
 800078e:	bf00      	nop
 8000790:	3740      	adds	r7, #64	; 0x40
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f001 fad3 	bl	8001d94 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80007f4:	f000 fae8 	bl	8000dc8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	40013000 	.word	0x40013000

08000804 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2110      	movs	r1, #16
 800084c:	481b      	ldr	r0, [pc, #108]	; (80008bc <MX_GPIO_Init+0xb8>)
 800084e:	f000 fe9e 	bl	800158e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin | ST7789_RST_Pin | GPIO_PIN_3,
 8000852:	2200      	movs	r2, #0
 8000854:	210b      	movs	r1, #11
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000858:	f000 fe99 	bl	800158e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : ST7789_CS_Pin */
	GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800085c:	2310      	movs	r3, #16
 800085e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4619      	mov	r1, r3
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000874:	f000 fd1a 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin PB3 */
	GPIO_InitStruct.Pin = ST7789_DC_Pin | ST7789_RST_Pin | GPIO_PIN_3;
 8000878:	230b      	movs	r3, #11
 800087a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2302      	movs	r3, #2
 8000886:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000890:	f000 fd0c 	bl	80012ac <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000894:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000898:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xb8>)
 80008aa:	f000 fcff 	bl	80012ac <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <Menu>:

/* USER CODE BEGIN 4 */

void Menu() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af04      	add	r7, sp, #16
	ST7789_WriteString(90, 60, "MENU", Font_16x26, WHITE, BLACK);
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <Menu+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	9202      	str	r2, [sp, #8]
 80008d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d4:	9201      	str	r2, [sp, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	9200      	str	r2, [sp, #0]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a25      	ldr	r2, [pc, #148]	; (8000974 <Menu+0xb0>)
 80008de:	213c      	movs	r1, #60	; 0x3c
 80008e0:	205a      	movs	r0, #90	; 0x5a
 80008e2:	f7ff fe8d 	bl	8000600 <ST7789_WriteString>
	ST7789_WriteString(60, 120, "New Game", Font_11x18, WHITE, BLACK);
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <Menu+0xb4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	9202      	str	r2, [sp, #8]
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	9201      	str	r2, [sp, #4]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	9200      	str	r2, [sp, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <Menu+0xb8>)
 80008fa:	2178      	movs	r1, #120	; 0x78
 80008fc:	203c      	movs	r0, #60	; 0x3c
 80008fe:	f7ff fe7f 	bl	8000600 <ST7789_WriteString>

	char result[11];
	sprintf(result, "Record: %i", record);
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <Menu+0xbc>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	491e      	ldr	r1, [pc, #120]	; (8000984 <Menu+0xc0>)
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fcda 	bl	80022c4 <siprintf>
	ST7789_WriteString(60, 140, result, Font_11x18, WHITE, BLACK);
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <Menu+0xb4>)
 8000912:	1d39      	adds	r1, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	9202      	str	r2, [sp, #8]
 8000918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	9200      	str	r2, [sp, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	460a      	mov	r2, r1
 8000926:	218c      	movs	r1, #140	; 0x8c
 8000928:	203c      	movs	r0, #60	; 0x3c
 800092a:	f7ff fe69 	bl	8000600 <ST7789_WriteString>

	ST7789_WriteString(36, 180, "Pressione qualquer botao", Font_7x10, WHITE,
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <Menu+0xc4>)
 8000930:	2200      	movs	r2, #0
 8000932:	9202      	str	r2, [sp, #8]
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	9201      	str	r2, [sp, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <Menu+0xc8>)
 8000942:	21b4      	movs	r1, #180	; 0xb4
 8000944:	2024      	movs	r0, #36	; 0x24
 8000946:	f7ff fe5b 	bl	8000600 <ST7789_WriteString>
	BLACK);
	ST7789_WriteString(82, 190, "Pra comecar", Font_7x10, WHITE, BLACK);
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <Menu+0xc4>)
 800094c:	2200      	movs	r2, #0
 800094e:	9202      	str	r2, [sp, #8]
 8000950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000954:	9201      	str	r2, [sp, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	9200      	str	r2, [sp, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <Menu+0xcc>)
 800095e:	21be      	movs	r1, #190	; 0xbe
 8000960:	2052      	movs	r0, #82	; 0x52
 8000962:	f7ff fe4d 	bl	8000600 <ST7789_WriteString>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000010 	.word	0x20000010
 8000974:	08002bc0 	.word	0x08002bc0
 8000978:	20000008 	.word	0x20000008
 800097c:	08002bc8 	.word	0x08002bc8
 8000980:	200000a4 	.word	0x200000a4
 8000984:	08002bd4 	.word	0x08002bd4
 8000988:	20000000 	.word	0x20000000
 800098c:	08002be0 	.word	0x08002be0
 8000990:	08002bfc 	.word	0x08002bfc

08000994 <PrintSelectDifficulty>:
void PrintSelectDifficulty(char selection) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af04      	add	r7, sp, #16
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteString(20, 30, "Selecione uma\ndificuldade:", Font_11x18, WHITE,
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <PrintSelectDifficulty+0xb0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	9202      	str	r2, [sp, #8]
 80009a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a8:	9201      	str	r2, [sp, #4]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <PrintSelectDifficulty+0xb4>)
 80009b2:	211e      	movs	r1, #30
 80009b4:	2014      	movs	r0, #20
 80009b6:	f7ff fe23 	bl	8000600 <ST7789_WriteString>
	BLACK);

	switch (selection) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <PrintSelectDifficulty+0x32>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d01d      	beq.n	8000a00 <PrintSelectDifficulty+0x6c>
	case 1:
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, WHITE, BLACK);
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, YELLOW, BLACK);
		break;
	default:
		break;
 80009c4:	e039      	b.n	8000a3a <PrintSelectDifficulty+0xa6>
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, YELLOW, BLACK);
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <PrintSelectDifficulty+0xb0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	9202      	str	r2, [sp, #8]
 80009cc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	9200      	str	r2, [sp, #0]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <PrintSelectDifficulty+0xb8>)
 80009da:	2178      	movs	r1, #120	; 0x78
 80009dc:	200a      	movs	r0, #10
 80009de:	f7ff fe0f 	bl	8000600 <ST7789_WriteString>
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, WHITE, BLACK);
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <PrintSelectDifficulty+0xb0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	9202      	str	r2, [sp, #8]
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <PrintSelectDifficulty+0xbc>)
 80009f6:	218c      	movs	r1, #140	; 0x8c
 80009f8:	200a      	movs	r0, #10
 80009fa:	f7ff fe01 	bl	8000600 <ST7789_WriteString>
		break;
 80009fe:	e01c      	b.n	8000a3a <PrintSelectDifficulty+0xa6>
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, WHITE, BLACK);
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <PrintSelectDifficulty+0xb0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	9202      	str	r2, [sp, #8]
 8000a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0a:	9201      	str	r2, [sp, #4]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <PrintSelectDifficulty+0xb8>)
 8000a14:	2178      	movs	r1, #120	; 0x78
 8000a16:	200a      	movs	r0, #10
 8000a18:	f7ff fdf2 	bl	8000600 <ST7789_WriteString>
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, YELLOW, BLACK);
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <PrintSelectDifficulty+0xb0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	9202      	str	r2, [sp, #8]
 8000a22:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <PrintSelectDifficulty+0xbc>)
 8000a30:	218c      	movs	r1, #140	; 0x8c
 8000a32:	200a      	movs	r0, #10
 8000a34:	f7ff fde4 	bl	8000600 <ST7789_WriteString>
		break;
 8000a38:	bf00      	nop
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	08002c08 	.word	0x08002c08
 8000a4c:	08002c24 	.word	0x08002c24
 8000a50:	08002c2c 	.word	0x08002c2c

08000a54 <SelectDifficulty>:
char SelectDifficulty(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	ST7789_Fill_Color(BLACK);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fd20 	bl	80004a0 <ST7789_Fill_Color>
	PrintSelectDifficulty(0);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff97 	bl	8000994 <PrintSelectDifficulty>

	char btns[3];
	const char UsingBtns[3] = { 10, 11, 12 };
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <SelectDifficulty+0x64>)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	8019      	strh	r1, [r3, #0]
 8000a70:	3302      	adds	r3, #2
 8000a72:	0c12      	lsrs	r2, r2, #16
 8000a74:	701a      	strb	r2, [r3, #0]

	char selection = SIZE4X4;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]

	do {
		DetectButtonPress((char* )UsingBtns, btns, 3);
 8000a7a:	1d39      	adds	r1, r7, #4
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f93e 	bl	8000d02 <DetectButtonPress>

		if (btns[0] == 0 || btns[2] == 0)
 8000a86:	793b      	ldrb	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <SelectDifficulty+0x3e>
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <SelectDifficulty+0x4c>
		{
			selection++;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	3301      	adds	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
			selection %= 2;
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
		}

		PrintSelectDifficulty(selection);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff76 	bl	8000994 <PrintSelectDifficulty>
	} while(btns[1] != 0);
 8000aa8:	797b      	ldrb	r3, [r7, #5]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1e5      	bne.n	8000a7a <SelectDifficulty+0x26>

	return selection;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08002bbc 	.word	0x08002bbc

08000abc <PrintSelectMode>:
void PrintSelectMode(char selection)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteString(20, 30, "Modo de Jogo: ", Font_11x18, WHITE, BLACK);
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <PrintSelectMode+0xb0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	9202      	str	r2, [sp, #8]
 8000acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <PrintSelectMode+0xb4>)
 8000ada:	211e      	movs	r1, #30
 8000adc:	2014      	movs	r0, #20
 8000ade:	f7ff fd8f 	bl	8000600 <ST7789_WriteString>
	switch (selection) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <PrintSelectMode+0x32>
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d01d      	beq.n	8000b28 <PrintSelectMode+0x6c>
		case 1:
			ST7789_WriteString(10, 120, "Singleplayer", Font_11x18, WHITE, BLACK);
			ST7789_WriteString(10, 140, "Multiplayer", Font_11x18, YELLOW, BLACK);
			break;
		default:
			break;
 8000aec:	e039      	b.n	8000b62 <PrintSelectMode+0xa6>
			ST7789_WriteString(10, 120, "Singleplayer", Font_11x18, YELLOW, BLACK);
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <PrintSelectMode+0xb0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	9202      	str	r2, [sp, #8]
 8000af4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000af8:	9201      	str	r2, [sp, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	9200      	str	r2, [sp, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <PrintSelectMode+0xb8>)
 8000b02:	2178      	movs	r1, #120	; 0x78
 8000b04:	200a      	movs	r0, #10
 8000b06:	f7ff fd7b 	bl	8000600 <ST7789_WriteString>
			ST7789_WriteString(10, 140, "Multiplayer", Font_11x18, WHITE, BLACK);
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <PrintSelectMode+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b14:	9201      	str	r2, [sp, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <PrintSelectMode+0xbc>)
 8000b1e:	218c      	movs	r1, #140	; 0x8c
 8000b20:	200a      	movs	r0, #10
 8000b22:	f7ff fd6d 	bl	8000600 <ST7789_WriteString>
			break;
 8000b26:	e01c      	b.n	8000b62 <PrintSelectMode+0xa6>
			ST7789_WriteString(10, 120, "Singleplayer", Font_11x18, WHITE, BLACK);
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <PrintSelectMode+0xb0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	9202      	str	r2, [sp, #8]
 8000b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b32:	9201      	str	r2, [sp, #4]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	9200      	str	r2, [sp, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <PrintSelectMode+0xb8>)
 8000b3c:	2178      	movs	r1, #120	; 0x78
 8000b3e:	200a      	movs	r0, #10
 8000b40:	f7ff fd5e 	bl	8000600 <ST7789_WriteString>
			ST7789_WriteString(10, 140, "Multiplayer", Font_11x18, YELLOW, BLACK);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <PrintSelectMode+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	9202      	str	r2, [sp, #8]
 8000b4a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b4e:	9201      	str	r2, [sp, #4]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	9200      	str	r2, [sp, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <PrintSelectMode+0xbc>)
 8000b58:	218c      	movs	r1, #140	; 0x8c
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f7ff fd50 	bl	8000600 <ST7789_WriteString>
			break;
 8000b60:	bf00      	nop
		}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	08002c34 	.word	0x08002c34
 8000b74:	08002c44 	.word	0x08002c44
 8000b78:	08002c54 	.word	0x08002c54

08000b7c <SelectMode>:
char SelectMode(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	ST7789_Fill_Color(BLACK);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fc8c 	bl	80004a0 <ST7789_Fill_Color>
	PrintSelectMode(0);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff97 	bl	8000abc <PrintSelectMode>
	char btns[3];
		const char UsingBtns[3] = { 10, 11, 12 };
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <SelectMode+0x64>)
 8000b90:	463b      	mov	r3, r7
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	4611      	mov	r1, r2
 8000b96:	8019      	strh	r1, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	0c12      	lsrs	r2, r2, #16
 8000b9c:	701a      	strb	r2, [r3, #0]

		char selection = SINGLEPLAYER;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]

		do {
			DetectButtonPress((char* )UsingBtns, btns, 3);
 8000ba2:	1d39      	adds	r1, r7, #4
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f8aa 	bl	8000d02 <DetectButtonPress>

			if (btns[0] == 0 || btns[2] == 0)
 8000bae:	793b      	ldrb	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <SelectMode+0x3e>
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d106      	bne.n	8000bc8 <SelectMode+0x4c>
			{
				selection++;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
				selection %= 2;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	71fb      	strb	r3, [r7, #7]
			}

			PrintSelectMode(selection);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff76 	bl	8000abc <PrintSelectMode>
		} while(btns[1] != 0);
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1e5      	bne.n	8000ba2 <SelectMode+0x26>

		return selection;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08002bbc 	.word	0x08002bbc

08000be4 <ReadButtons>:
}
void ExibirFimDeJogo(void) {

}

void ReadButtons(char *out) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	out[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <ReadButtons+0x58>)
 8000bf2:	f000 fcb5 	bl	8001560 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	701a      	strb	r2, [r3, #0]
	out[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	1c5c      	adds	r4, r3, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <ReadButtons+0x58>)
 8000c08:	f000 fcaa 	bl	8001560 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	7023      	strb	r3, [r4, #0]
	out[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	1c9c      	adds	r4, r3, #2
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <ReadButtons+0x58>)
 8000c1a:	f000 fca1 	bl	8001560 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	7023      	strb	r3, [r4, #0]
	out[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1cdc      	adds	r4, r3, #3
 8000c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2a:	4804      	ldr	r0, [pc, #16]	; (8000c3c <ReadButtons+0x58>)
 8000c2c:	f000 fc98 	bl	8001560 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	7023      	strb	r3, [r4, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40010800 	.word	0x40010800

08000c40 <AwaitForAnyButton>:

void AwaitForAnyButton(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	char buttons[4];

	do {
		ReadButtons(buttons);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffcb 	bl	8000be4 <ReadButtons>
	} while (!Contains(buttons, 4, 0));
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	2104      	movs	r1, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f897 	bl	8000d88 <Contains>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f2      	beq.n	8000c46 <AwaitForAnyButton+0x6>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DetectAnyButtonPress>:

void DetectAnyButtonPress(char *out) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	char buttons[4];

	for (int i = 0; i < 4; ++i)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e007      	b.n	8000c86 <DetectAnyButtonPress+0x1e>
		out[i] = 1;
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	ddf4      	ble.n	8000c76 <DetectAnyButtonPress+0xe>

	do {
		ReadButtons(buttons);
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffa7 	bl	8000be4 <ReadButtons>
	} while (!Contains(buttons, 4, 0));
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f872 	bl	8000d88 <Contains>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f0      	beq.n	8000c8c <DetectAnyButtonPress+0x24>

	long btnPressTime = HAL_GetTick();
 8000caa:	f000 f9ef 	bl	800108c <HAL_GetTick>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60fb      	str	r3, [r7, #12]

	do {
		for (int i = 0; i < 4; ++i)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	e011      	b.n	8000cdc <DetectAnyButtonPress+0x74>
			if (out[i] == 1)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d108      	bne.n	8000cd6 <DetectAnyButtonPress+0x6e>
				out[i] = buttons[i];
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	f107 0108 	add.w	r1, r7, #8
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	440a      	add	r2, r1
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; ++i)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	ddea      	ble.n	8000cb8 <DetectAnyButtonPress+0x50>

		ReadButtons(buttons);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff7c 	bl	8000be4 <ReadButtons>
	} while (HAL_GetTick() - btnPressTime < 100);
 8000cec:	f000 f9ce 	bl	800108c <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b63      	cmp	r3, #99	; 0x63
 8000cf8:	d9db      	bls.n	8000cb2 <DetectAnyButtonPress+0x4a>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <DetectButtonPress>:
void DetectButtonPress(char buttons[], char *out, size_t amount) {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b088      	sub	sp, #32
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	char btnValues[4];
	char end = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	77fb      	strb	r3, [r7, #31]
	do {
		DetectAnyButtonPress(btnValues);
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffa6 	bl	8000c68 <DetectAnyButtonPress>

		char outIndex = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	77bb      	strb	r3, [r7, #30]
		for (int i = 0; i < 4; i++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	e026      	b.n	8000d74 <DetectButtonPress+0x72>
			if (Contains(buttons, amount, i + 9)) {
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3309      	adds	r3, #9
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f000 f828 	bl	8000d88 <Contains>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d017      	beq.n	8000d6e <DetectButtonPress+0x6c>
				char aux = NOTPRESSED;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	75fb      	strb	r3, [r7, #23]
				if (btnValues[i] == aux)
 8000d42:	f107 0210 	add.w	r2, r7, #16
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	7dfa      	ldrb	r2, [r7, #23]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d101      	bne.n	8000d56 <DetectButtonPress+0x54>
					end = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	77fb      	strb	r3, [r7, #31]
				out[outIndex] = btnValues[i];
 8000d56:	7fbb      	ldrb	r3, [r7, #30]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f107 0110 	add.w	r1, r7, #16
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	440a      	add	r2, r1
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
				outIndex++;
 8000d68:	7fbb      	ldrb	r3, [r7, #30]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	77bb      	strb	r3, [r7, #30]
		for (int i = 0; i < 4; i++) {
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	ddd5      	ble.n	8000d26 <DetectButtonPress+0x24>
			}
		}
	} while (end == 0);
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0c8      	beq.n	8000d12 <DetectButtonPress+0x10>
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Contains>:

char Contains(char *Iterable, size_t size, char Contains) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < size; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e00b      	b.n	8000db4 <Contains+0x2c>
		if (Iterable[i] == Contains) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d101      	bne.n	8000dae <Contains+0x26>
			return 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e007      	b.n	8000dbe <Contains+0x36>
	for (int i = 0; i < size; i++) {
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8ef      	bhi.n	8000d9c <Contains+0x14>
		}
	}
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dce:	e7fe      	b.n	8000dce <Error_Handler+0x6>

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d12f      	bne.n	8000eb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e84:	23a0      	movs	r3, #160	; 0xa0
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_SPI_MspInit+0x90>)
 8000e98:	f000 fa08 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_SPI_MspInit+0x90>)
 8000eb0:	f000 f9fc 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f8ab 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f001 f98a 	bl	8002260 <__errno>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	230c      	movs	r3, #12
 8000f50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20005000 	.word	0x20005000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200000a8 	.word	0x200000a8
 8000f80:	20000118 	.word	0x20000118

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	; (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffe5 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f001 f957 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fb7b 	bl	80006b8 <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fcc:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 8000fd0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000fd4:	20000118 	.word	0x20000118

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f929 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff feea 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f933 	bl	8001292 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f909 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000018 	.word	0x20000018
 8001060:	20000020 	.word	0x20000020
 8001064:	2000001c 	.word	0x2000001c

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000020 	.word	0x20000020
 8001088:	20000110 	.word	0x20000110

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000110 	.word	0x20000110

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_Delay+0x40>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000020 	.word	0x20000020

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff49 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5e 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	e127      	b.n	8001510 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c0:	2201      	movs	r2, #1
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8116 	bne.w	800150a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d034      	beq.n	8001350 <HAL_GPIO_Init+0xa4>
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d80d      	bhi.n	8001306 <HAL_GPIO_Init+0x5a>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x9a>
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d804      	bhi.n	80012fc <HAL_GPIO_Init+0x50>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d031      	beq.n	800135a <HAL_GPIO_Init+0xae>
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d01c      	beq.n	8001334 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fa:	e048      	b.n	800138e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d043      	beq.n	8001388 <HAL_GPIO_Init+0xdc>
 8001300:	2b11      	cmp	r3, #17
 8001302:	d01b      	beq.n	800133c <HAL_GPIO_Init+0x90>
          break;
 8001304:	e043      	b.n	800138e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001306:	4a89      	ldr	r2, [pc, #548]	; (800152c <HAL_GPIO_Init+0x280>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d026      	beq.n	800135a <HAL_GPIO_Init+0xae>
 800130c:	4a87      	ldr	r2, [pc, #540]	; (800152c <HAL_GPIO_Init+0x280>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d806      	bhi.n	8001320 <HAL_GPIO_Init+0x74>
 8001312:	4a87      	ldr	r2, [pc, #540]	; (8001530 <HAL_GPIO_Init+0x284>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d020      	beq.n	800135a <HAL_GPIO_Init+0xae>
 8001318:	4a86      	ldr	r2, [pc, #536]	; (8001534 <HAL_GPIO_Init+0x288>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01d      	beq.n	800135a <HAL_GPIO_Init+0xae>
          break;
 800131e:	e036      	b.n	800138e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001320:	4a85      	ldr	r2, [pc, #532]	; (8001538 <HAL_GPIO_Init+0x28c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0xae>
 8001326:	4a85      	ldr	r2, [pc, #532]	; (800153c <HAL_GPIO_Init+0x290>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d016      	beq.n	800135a <HAL_GPIO_Init+0xae>
 800132c:	4a84      	ldr	r2, [pc, #528]	; (8001540 <HAL_GPIO_Init+0x294>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0xae>
          break;
 8001332:	e02c      	b.n	800138e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e028      	b.n	800138e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	3304      	adds	r3, #4
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e023      	b.n	800138e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	3308      	adds	r3, #8
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e01e      	b.n	800138e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	330c      	adds	r3, #12
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e019      	b.n	800138e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001362:	2304      	movs	r3, #4
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e012      	b.n	800138e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001370:	2308      	movs	r3, #8
 8001372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	611a      	str	r2, [r3, #16]
          break;
 800137a:	e008      	b.n	800138e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800137c:	2308      	movs	r3, #8
 800137e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	615a      	str	r2, [r3, #20]
          break;
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d801      	bhi.n	8001398 <HAL_GPIO_Init+0xec>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	e001      	b.n	800139c <HAL_GPIO_Init+0xf0>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2bff      	cmp	r3, #255	; 0xff
 80013a2:	d802      	bhi.n	80013aa <HAL_GPIO_Init+0xfe>
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x104>
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3b08      	subs	r3, #8
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	210f      	movs	r1, #15
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	401a      	ands	r2, r3
 80013c2:	6a39      	ldr	r1, [r7, #32]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8096 	beq.w	800150a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_GPIO_Init+0x298>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_GPIO_Init+0x298>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_GPIO_Init+0x298>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f6:	4a54      	ldr	r2, [pc, #336]	; (8001548 <HAL_GPIO_Init+0x29c>)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4b      	ldr	r2, [pc, #300]	; (800154c <HAL_GPIO_Init+0x2a0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x19e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x19a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a49      	ldr	r2, [pc, #292]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x196>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x192>
 800143a:	2303      	movs	r3, #3
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x1a0>
 800143e:	2304      	movs	r3, #4
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x1a0>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x1a0>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x1a0>
 800144a:	2300      	movs	r3, #0
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145c:	493a      	ldr	r1, [pc, #232]	; (8001548 <HAL_GPIO_Init+0x29c>)
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4938      	ldr	r1, [pc, #224]	; (800155c <HAL_GPIO_Init+0x2b0>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4933      	ldr	r1, [pc, #204]	; (800155c <HAL_GPIO_Init+0x2b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	492e      	ldr	r1, [pc, #184]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4929      	ldr	r1, [pc, #164]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	4924      	ldr	r1, [pc, #144]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
 80014d2:	e006      	b.n	80014e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	43db      	mvns	r3, r3
 80014dc:	491f      	ldr	r1, [pc, #124]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014de:	4013      	ands	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	491a      	ldr	r1, [pc, #104]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_GPIO_Init+0x2b0>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	43db      	mvns	r3, r3
 8001504:	4915      	ldr	r1, [pc, #84]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001506:	4013      	ands	r3, r2
 8001508:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	3301      	adds	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f aed0 	bne.w	80012c0 <HAL_GPIO_Init+0x14>
  }
}
 8001520:	bf00      	nop
 8001522:	372c      	adds	r7, #44	; 0x2c
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	10210000 	.word	0x10210000
 8001530:	10110000 	.word	0x10110000
 8001534:	10120000 	.word	0x10120000
 8001538:	10310000 	.word	0x10310000
 800153c:	10320000 	.word	0x10320000
 8001540:	10220000 	.word	0x10220000
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	40010800 	.word	0x40010800
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40011000 	.word	0x40011000
 8001558:	40011400 	.word	0x40011400
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159e:	787b      	ldrb	r3, [r7, #1]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	041a      	lsls	r2, r3, #16
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	611a      	str	r2, [r3, #16]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e26c      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8087 	beq.w	80016ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00c      	beq.n	8001606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ec:	4b8f      	ldr	r3, [pc, #572]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d112      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d06c      	beq.n	80016ec <HAL_RCC_OscConfig+0x12c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d168      	bne.n	80016ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e246      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x76>
 8001628:	4b80      	ldr	r3, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a7f      	ldr	r2, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e02e      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7a      	ldr	r2, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a77      	ldr	r2, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01d      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0xbc>
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a71      	ldr	r2, [pc, #452]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fcf6 	bl	800108c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fcf2 	bl	800108c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1fa      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe4>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fce2 	bl	800108c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fcde 	bl	800108c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1e6      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x10c>
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d063      	beq.n	80017c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fa:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e1ba      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4939      	ldr	r1, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	e03a      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fc97 	bl	800108c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fc93 	bl	800108c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e19b      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4927      	ldr	r1, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fc76 	bl	800108c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fc72 	bl	800108c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e17a      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03a      	beq.n	8001844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d019      	beq.n	800180a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fc56 	bl	800108c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fc52 	bl	800108c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e15a      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 faa8 	bl	8001d58 <RCC_Delay>
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fc3c 	bl	800108c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001816:	e00f      	b.n	8001838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fc38 	bl	800108c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d908      	bls.n	8001838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e140      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	42420000 	.word	0x42420000
 8001834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b9e      	ldr	r3, [pc, #632]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e9      	bne.n	8001818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a6 	beq.w	800199e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b97      	ldr	r3, [pc, #604]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10d      	bne.n	800187e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b94      	ldr	r3, [pc, #592]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a93      	ldr	r2, [pc, #588]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b91      	ldr	r3, [pc, #580]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a8a      	ldr	r2, [pc, #552]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7ff fbf9 	bl	800108c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7ff fbf5 	bl	800108c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0fd      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x312>
 80018c4:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a7a      	ldr	r2, [pc, #488]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e02d      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x334>
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a72      	ldr	r2, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e01c      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x356>
 80018fc:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a6c      	ldr	r2, [pc, #432]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a66      	ldr	r2, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d015      	beq.n	8001962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fba9 	bl	800108c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fba5 	bl	800108c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0ab      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ee      	beq.n	800193e <HAL_RCC_OscConfig+0x37e>
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff fb93 	bl	800108c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff fb8f 	bl	800108c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e095      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8081 	beq.w	8001aaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d061      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d146      	bne.n	8001a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fb63 	bl	800108c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fb5f 	bl	800108c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e067      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	492d      	ldr	r1, [pc, #180]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a19      	ldr	r1, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	430b      	orrs	r3, r1
 8001a16:	4927      	ldr	r1, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb33 	bl	800108c <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fb2f 	bl	800108c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e037      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46a>
 8001a48:	e02f      	b.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb1c 	bl	800108c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fb18 	bl	800108c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e020      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x498>
 8001a76:	e018      	b.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e013      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42420060 	.word	0x42420060

08001ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4965      	ldr	r1, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff fa6c 	bl	800108c <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff fa68 	bl	800108c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4601      	mov	r1, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	fa21 f303 	lsr.w	r3, r1, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9ca 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08005488 	.word	0x08005488
 8001c8c:	20000018 	.word	0x20000018
 8001c90:	2000001c 	.word	0x2000001c

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b490      	push	{r4, r7}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c9c:	1d3c      	adds	r4, r7, #4
 8001c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x46>
 8001cd2:	e02d      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd6:	623b      	str	r3, [r7, #32]
      break;
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0c5b      	lsrs	r3, r3, #17
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d12:	fb02 f203 	mul.w	r2, r2, r3
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e004      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	623b      	str	r3, [r7, #32]
      break;
 8001d2e:	e002      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d32:	623b      	str	r3, [r7, #32]
      break;
 8001d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d36:	6a3b      	ldr	r3, [r7, #32]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc90      	pop	{r4, r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	08002c60 	.word	0x08002c60
 8001d48:	08002c70 	.word	0x08002c70
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	003d0900 	.word	0x003d0900

08001d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <RCC_Delay+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <RCC_Delay+0x38>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a5b      	lsrs	r3, r3, #9
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d74:	bf00      	nop
  }
  while (Delay --);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f9      	bne.n	8001d74 <RCC_Delay+0x1c>
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000018 	.word	0x20000018
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e076      	b.n	8001e94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001db6:	d009      	beq.n	8001dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff f824 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	0c1a      	lsrs	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f002 0204 	and.w	r2, r2, #4
 8001e72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_SPI_Transmit+0x22>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e126      	b.n	800210c <HAL_SPI_Transmit+0x270>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec6:	f7ff f8e1 	bl	800108c <HAL_GetTick>
 8001eca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d002      	beq.n	8001ee2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ee0:	e10b      	b.n	80020fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Transmit+0x52>
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ef2:	e102      	b.n	80020fa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3a:	d10f      	bne.n	8001f5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d007      	beq.n	8001f7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f82:	d14b      	bne.n	800201c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_Transmit+0xf6>
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d13e      	bne.n	8002010 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	1c9a      	adds	r2, r3, #2
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fb6:	e02b      	b.n	8002010 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d112      	bne.n	8001fec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	881a      	ldrh	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	1c9a      	adds	r2, r3, #2
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fea:	e011      	b.n	8002010 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fec:	f7ff f84e 	bl	800108c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d803      	bhi.n	8002004 <HAL_SPI_Transmit+0x168>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002002:	d102      	bne.n	800200a <HAL_SPI_Transmit+0x16e>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800200e:	e074      	b.n	80020fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ce      	bne.n	8001fb8 <HAL_SPI_Transmit+0x11c>
 800201a:	e04c      	b.n	80020b6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_SPI_Transmit+0x18e>
 8002024:	8afb      	ldrh	r3, [r7, #22]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d140      	bne.n	80020ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	330c      	adds	r3, #12
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002050:	e02c      	b.n	80020ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d113      	bne.n	8002088 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	330c      	adds	r3, #12
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	86da      	strh	r2, [r3, #54]	; 0x36
 8002086:	e011      	b.n	80020ac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002088:	f7ff f800 	bl	800108c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d803      	bhi.n	80020a0 <HAL_SPI_Transmit+0x204>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d102      	bne.n	80020a6 <HAL_SPI_Transmit+0x20a>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020aa:	e026      	b.n	80020fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1cd      	bne.n	8002052 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f8b2 	bl	8002224 <SPI_EndRxTxTransaction>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]
 80020f6:	e000      	b.n	80020fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80020f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800210a:	7ffb      	ldrb	r3, [r7, #31]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002124:	f7fe ffb2 	bl	800108c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002134:	f7fe ffaa 	bl	800108c <HAL_GetTick>
 8002138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	0d1b      	lsrs	r3, r3, #20
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800214a:	e054      	b.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d050      	beq.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002154:	f7fe ff9a 	bl	800108c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	429a      	cmp	r2, r3
 8002162:	d902      	bls.n	800216a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13d      	bne.n	80021e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002182:	d111      	bne.n	80021a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218c:	d004      	beq.n	8002198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d107      	bne.n	80021a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	d10f      	bne.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e017      	b.n	8002216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	bf0c      	ite	eq
 8002206:	2301      	moveq	r3, #1
 8002208:	2300      	movne	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	429a      	cmp	r2, r3
 8002212:	d19b      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000018 	.word	0x20000018

08002224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ff6a 	bl	8002114 <SPI_WaitFlagStateUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e000      	b.n	8002258 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <__errno>:
 8002260:	4b01      	ldr	r3, [pc, #4]	; (8002268 <__errno+0x8>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000024 	.word	0x20000024

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2500      	movs	r5, #0
 8002270:	4e0c      	ldr	r6, [pc, #48]	; (80022a4 <__libc_init_array+0x38>)
 8002272:	4c0d      	ldr	r4, [pc, #52]	; (80022a8 <__libc_init_array+0x3c>)
 8002274:	1ba4      	subs	r4, r4, r6
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	42a5      	cmp	r5, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	f000 fc34 	bl	8002ae8 <_init>
 8002280:	2500      	movs	r5, #0
 8002282:	4e0a      	ldr	r6, [pc, #40]	; (80022ac <__libc_init_array+0x40>)
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <__libc_init_array+0x44>)
 8002286:	1ba4      	subs	r4, r4, r6
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	42a5      	cmp	r5, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002294:	4798      	blx	r3
 8002296:	3501      	adds	r5, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229e:	4798      	blx	r3
 80022a0:	3501      	adds	r5, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	080054cc 	.word	0x080054cc
 80022a8:	080054cc 	.word	0x080054cc
 80022ac:	080054cc 	.word	0x080054cc
 80022b0:	080054d0 	.word	0x080054d0

080022b4 <memset>:
 80022b4:	4603      	mov	r3, r0
 80022b6:	4402      	add	r2, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	f803 1b01 	strb.w	r1, [r3], #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <siprintf>:
 80022c4:	b40e      	push	{r1, r2, r3}
 80022c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ca:	b500      	push	{lr}
 80022cc:	b09c      	sub	sp, #112	; 0x70
 80022ce:	ab1d      	add	r3, sp, #116	; 0x74
 80022d0:	9002      	str	r0, [sp, #8]
 80022d2:	9006      	str	r0, [sp, #24]
 80022d4:	9107      	str	r1, [sp, #28]
 80022d6:	9104      	str	r1, [sp, #16]
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <siprintf+0x38>)
 80022da:	4909      	ldr	r1, [pc, #36]	; (8002300 <siprintf+0x3c>)
 80022dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80022e0:	9105      	str	r1, [sp, #20]
 80022e2:	6800      	ldr	r0, [r0, #0]
 80022e4:	a902      	add	r1, sp, #8
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	f000 f866 	bl	80023b8 <_svfiprintf_r>
 80022ec:	2200      	movs	r2, #0
 80022ee:	9b02      	ldr	r3, [sp, #8]
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	b01c      	add	sp, #112	; 0x70
 80022f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022f8:	b003      	add	sp, #12
 80022fa:	4770      	bx	lr
 80022fc:	20000024 	.word	0x20000024
 8002300:	ffff0208 	.word	0xffff0208

08002304 <__ssputs_r>:
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	688e      	ldr	r6, [r1, #8]
 800230a:	4682      	mov	sl, r0
 800230c:	429e      	cmp	r6, r3
 800230e:	460c      	mov	r4, r1
 8002310:	4690      	mov	r8, r2
 8002312:	4699      	mov	r9, r3
 8002314:	d837      	bhi.n	8002386 <__ssputs_r+0x82>
 8002316:	898a      	ldrh	r2, [r1, #12]
 8002318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800231c:	d031      	beq.n	8002382 <__ssputs_r+0x7e>
 800231e:	2302      	movs	r3, #2
 8002320:	6825      	ldr	r5, [r4, #0]
 8002322:	6909      	ldr	r1, [r1, #16]
 8002324:	1a6f      	subs	r7, r5, r1
 8002326:	6965      	ldr	r5, [r4, #20]
 8002328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800232c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002330:	f109 0301 	add.w	r3, r9, #1
 8002334:	443b      	add	r3, r7
 8002336:	429d      	cmp	r5, r3
 8002338:	bf38      	it	cc
 800233a:	461d      	movcc	r5, r3
 800233c:	0553      	lsls	r3, r2, #21
 800233e:	d530      	bpl.n	80023a2 <__ssputs_r+0x9e>
 8002340:	4629      	mov	r1, r5
 8002342:	f000 fb37 	bl	80029b4 <_malloc_r>
 8002346:	4606      	mov	r6, r0
 8002348:	b950      	cbnz	r0, 8002360 <__ssputs_r+0x5c>
 800234a:	230c      	movs	r3, #12
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f8ca 3000 	str.w	r3, [sl]
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235a:	81a3      	strh	r3, [r4, #12]
 800235c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002360:	463a      	mov	r2, r7
 8002362:	6921      	ldr	r1, [r4, #16]
 8002364:	f000 fab6 	bl	80028d4 <memcpy>
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	81a3      	strh	r3, [r4, #12]
 8002374:	6126      	str	r6, [r4, #16]
 8002376:	443e      	add	r6, r7
 8002378:	6026      	str	r6, [r4, #0]
 800237a:	464e      	mov	r6, r9
 800237c:	6165      	str	r5, [r4, #20]
 800237e:	1bed      	subs	r5, r5, r7
 8002380:	60a5      	str	r5, [r4, #8]
 8002382:	454e      	cmp	r6, r9
 8002384:	d900      	bls.n	8002388 <__ssputs_r+0x84>
 8002386:	464e      	mov	r6, r9
 8002388:	4632      	mov	r2, r6
 800238a:	4641      	mov	r1, r8
 800238c:	6820      	ldr	r0, [r4, #0]
 800238e:	f000 faac 	bl	80028ea <memmove>
 8002392:	68a3      	ldr	r3, [r4, #8]
 8002394:	2000      	movs	r0, #0
 8002396:	1b9b      	subs	r3, r3, r6
 8002398:	60a3      	str	r3, [r4, #8]
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	441e      	add	r6, r3
 800239e:	6026      	str	r6, [r4, #0]
 80023a0:	e7dc      	b.n	800235c <__ssputs_r+0x58>
 80023a2:	462a      	mov	r2, r5
 80023a4:	f000 fb60 	bl	8002a68 <_realloc_r>
 80023a8:	4606      	mov	r6, r0
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d1e2      	bne.n	8002374 <__ssputs_r+0x70>
 80023ae:	6921      	ldr	r1, [r4, #16]
 80023b0:	4650      	mov	r0, sl
 80023b2:	f000 fab3 	bl	800291c <_free_r>
 80023b6:	e7c8      	b.n	800234a <__ssputs_r+0x46>

080023b8 <_svfiprintf_r>:
 80023b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023bc:	461d      	mov	r5, r3
 80023be:	898b      	ldrh	r3, [r1, #12]
 80023c0:	b09d      	sub	sp, #116	; 0x74
 80023c2:	061f      	lsls	r7, r3, #24
 80023c4:	4680      	mov	r8, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	4616      	mov	r6, r2
 80023ca:	d50f      	bpl.n	80023ec <_svfiprintf_r+0x34>
 80023cc:	690b      	ldr	r3, [r1, #16]
 80023ce:	b96b      	cbnz	r3, 80023ec <_svfiprintf_r+0x34>
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	f000 faef 	bl	80029b4 <_malloc_r>
 80023d6:	6020      	str	r0, [r4, #0]
 80023d8:	6120      	str	r0, [r4, #16]
 80023da:	b928      	cbnz	r0, 80023e8 <_svfiprintf_r+0x30>
 80023dc:	230c      	movs	r3, #12
 80023de:	f8c8 3000 	str.w	r3, [r8]
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	e0c8      	b.n	800257a <_svfiprintf_r+0x1c2>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	6163      	str	r3, [r4, #20]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9309      	str	r3, [sp, #36]	; 0x24
 80023f0:	2320      	movs	r3, #32
 80023f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023f6:	2330      	movs	r3, #48	; 0x30
 80023f8:	f04f 0b01 	mov.w	fp, #1
 80023fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002400:	9503      	str	r5, [sp, #12]
 8002402:	4637      	mov	r7, r6
 8002404:	463d      	mov	r5, r7
 8002406:	f815 3b01 	ldrb.w	r3, [r5], #1
 800240a:	b10b      	cbz	r3, 8002410 <_svfiprintf_r+0x58>
 800240c:	2b25      	cmp	r3, #37	; 0x25
 800240e:	d13e      	bne.n	800248e <_svfiprintf_r+0xd6>
 8002410:	ebb7 0a06 	subs.w	sl, r7, r6
 8002414:	d00b      	beq.n	800242e <_svfiprintf_r+0x76>
 8002416:	4653      	mov	r3, sl
 8002418:	4632      	mov	r2, r6
 800241a:	4621      	mov	r1, r4
 800241c:	4640      	mov	r0, r8
 800241e:	f7ff ff71 	bl	8002304 <__ssputs_r>
 8002422:	3001      	adds	r0, #1
 8002424:	f000 80a4 	beq.w	8002570 <_svfiprintf_r+0x1b8>
 8002428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800242a:	4453      	add	r3, sl
 800242c:	9309      	str	r3, [sp, #36]	; 0x24
 800242e:	783b      	ldrb	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 809d 	beq.w	8002570 <_svfiprintf_r+0x1b8>
 8002436:	2300      	movs	r3, #0
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002440:	9304      	str	r3, [sp, #16]
 8002442:	9307      	str	r3, [sp, #28]
 8002444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002448:	931a      	str	r3, [sp, #104]	; 0x68
 800244a:	462f      	mov	r7, r5
 800244c:	2205      	movs	r2, #5
 800244e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002452:	4850      	ldr	r0, [pc, #320]	; (8002594 <_svfiprintf_r+0x1dc>)
 8002454:	f000 fa30 	bl	80028b8 <memchr>
 8002458:	9b04      	ldr	r3, [sp, #16]
 800245a:	b9d0      	cbnz	r0, 8002492 <_svfiprintf_r+0xda>
 800245c:	06d9      	lsls	r1, r3, #27
 800245e:	bf44      	itt	mi
 8002460:	2220      	movmi	r2, #32
 8002462:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002466:	071a      	lsls	r2, r3, #28
 8002468:	bf44      	itt	mi
 800246a:	222b      	movmi	r2, #43	; 0x2b
 800246c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002470:	782a      	ldrb	r2, [r5, #0]
 8002472:	2a2a      	cmp	r2, #42	; 0x2a
 8002474:	d015      	beq.n	80024a2 <_svfiprintf_r+0xea>
 8002476:	462f      	mov	r7, r5
 8002478:	2000      	movs	r0, #0
 800247a:	250a      	movs	r5, #10
 800247c:	9a07      	ldr	r2, [sp, #28]
 800247e:	4639      	mov	r1, r7
 8002480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002484:	3b30      	subs	r3, #48	; 0x30
 8002486:	2b09      	cmp	r3, #9
 8002488:	d94d      	bls.n	8002526 <_svfiprintf_r+0x16e>
 800248a:	b1b8      	cbz	r0, 80024bc <_svfiprintf_r+0x104>
 800248c:	e00f      	b.n	80024ae <_svfiprintf_r+0xf6>
 800248e:	462f      	mov	r7, r5
 8002490:	e7b8      	b.n	8002404 <_svfiprintf_r+0x4c>
 8002492:	4a40      	ldr	r2, [pc, #256]	; (8002594 <_svfiprintf_r+0x1dc>)
 8002494:	463d      	mov	r5, r7
 8002496:	1a80      	subs	r0, r0, r2
 8002498:	fa0b f000 	lsl.w	r0, fp, r0
 800249c:	4318      	orrs	r0, r3
 800249e:	9004      	str	r0, [sp, #16]
 80024a0:	e7d3      	b.n	800244a <_svfiprintf_r+0x92>
 80024a2:	9a03      	ldr	r2, [sp, #12]
 80024a4:	1d11      	adds	r1, r2, #4
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	9103      	str	r1, [sp, #12]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	db01      	blt.n	80024b2 <_svfiprintf_r+0xfa>
 80024ae:	9207      	str	r2, [sp, #28]
 80024b0:	e004      	b.n	80024bc <_svfiprintf_r+0x104>
 80024b2:	4252      	negs	r2, r2
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	9207      	str	r2, [sp, #28]
 80024ba:	9304      	str	r3, [sp, #16]
 80024bc:	783b      	ldrb	r3, [r7, #0]
 80024be:	2b2e      	cmp	r3, #46	; 0x2e
 80024c0:	d10c      	bne.n	80024dc <_svfiprintf_r+0x124>
 80024c2:	787b      	ldrb	r3, [r7, #1]
 80024c4:	2b2a      	cmp	r3, #42	; 0x2a
 80024c6:	d133      	bne.n	8002530 <_svfiprintf_r+0x178>
 80024c8:	9b03      	ldr	r3, [sp, #12]
 80024ca:	3702      	adds	r7, #2
 80024cc:	1d1a      	adds	r2, r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	9203      	str	r2, [sp, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfb8      	it	lt
 80024d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024da:	9305      	str	r3, [sp, #20]
 80024dc:	4d2e      	ldr	r5, [pc, #184]	; (8002598 <_svfiprintf_r+0x1e0>)
 80024de:	2203      	movs	r2, #3
 80024e0:	7839      	ldrb	r1, [r7, #0]
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 f9e8 	bl	80028b8 <memchr>
 80024e8:	b138      	cbz	r0, 80024fa <_svfiprintf_r+0x142>
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	1b40      	subs	r0, r0, r5
 80024ee:	fa03 f000 	lsl.w	r0, r3, r0
 80024f2:	9b04      	ldr	r3, [sp, #16]
 80024f4:	3701      	adds	r7, #1
 80024f6:	4303      	orrs	r3, r0
 80024f8:	9304      	str	r3, [sp, #16]
 80024fa:	7839      	ldrb	r1, [r7, #0]
 80024fc:	2206      	movs	r2, #6
 80024fe:	4827      	ldr	r0, [pc, #156]	; (800259c <_svfiprintf_r+0x1e4>)
 8002500:	1c7e      	adds	r6, r7, #1
 8002502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002506:	f000 f9d7 	bl	80028b8 <memchr>
 800250a:	2800      	cmp	r0, #0
 800250c:	d038      	beq.n	8002580 <_svfiprintf_r+0x1c8>
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <_svfiprintf_r+0x1e8>)
 8002510:	bb13      	cbnz	r3, 8002558 <_svfiprintf_r+0x1a0>
 8002512:	9b03      	ldr	r3, [sp, #12]
 8002514:	3307      	adds	r3, #7
 8002516:	f023 0307 	bic.w	r3, r3, #7
 800251a:	3308      	adds	r3, #8
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002520:	444b      	add	r3, r9
 8002522:	9309      	str	r3, [sp, #36]	; 0x24
 8002524:	e76d      	b.n	8002402 <_svfiprintf_r+0x4a>
 8002526:	fb05 3202 	mla	r2, r5, r2, r3
 800252a:	2001      	movs	r0, #1
 800252c:	460f      	mov	r7, r1
 800252e:	e7a6      	b.n	800247e <_svfiprintf_r+0xc6>
 8002530:	2300      	movs	r3, #0
 8002532:	250a      	movs	r5, #10
 8002534:	4619      	mov	r1, r3
 8002536:	3701      	adds	r7, #1
 8002538:	9305      	str	r3, [sp, #20]
 800253a:	4638      	mov	r0, r7
 800253c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002540:	3a30      	subs	r2, #48	; 0x30
 8002542:	2a09      	cmp	r2, #9
 8002544:	d903      	bls.n	800254e <_svfiprintf_r+0x196>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0c8      	beq.n	80024dc <_svfiprintf_r+0x124>
 800254a:	9105      	str	r1, [sp, #20]
 800254c:	e7c6      	b.n	80024dc <_svfiprintf_r+0x124>
 800254e:	fb05 2101 	mla	r1, r5, r1, r2
 8002552:	2301      	movs	r3, #1
 8002554:	4607      	mov	r7, r0
 8002556:	e7f0      	b.n	800253a <_svfiprintf_r+0x182>
 8002558:	ab03      	add	r3, sp, #12
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4622      	mov	r2, r4
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_svfiprintf_r+0x1ec>)
 8002560:	a904      	add	r1, sp, #16
 8002562:	4640      	mov	r0, r8
 8002564:	f3af 8000 	nop.w
 8002568:	f1b0 3fff 	cmp.w	r0, #4294967295
 800256c:	4681      	mov	r9, r0
 800256e:	d1d6      	bne.n	800251e <_svfiprintf_r+0x166>
 8002570:	89a3      	ldrh	r3, [r4, #12]
 8002572:	065b      	lsls	r3, r3, #25
 8002574:	f53f af35 	bmi.w	80023e2 <_svfiprintf_r+0x2a>
 8002578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800257a:	b01d      	add	sp, #116	; 0x74
 800257c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002580:	ab03      	add	r3, sp, #12
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4622      	mov	r2, r4
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_svfiprintf_r+0x1ec>)
 8002588:	a904      	add	r1, sp, #16
 800258a:	4640      	mov	r0, r8
 800258c:	f000 f882 	bl	8002694 <_printf_i>
 8002590:	e7ea      	b.n	8002568 <_svfiprintf_r+0x1b0>
 8002592:	bf00      	nop
 8002594:	08005498 	.word	0x08005498
 8002598:	0800549e 	.word	0x0800549e
 800259c:	080054a2 	.word	0x080054a2
 80025a0:	00000000 	.word	0x00000000
 80025a4:	08002305 	.word	0x08002305

080025a8 <_printf_common>:
 80025a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025ac:	4691      	mov	r9, r2
 80025ae:	461f      	mov	r7, r3
 80025b0:	688a      	ldr	r2, [r1, #8]
 80025b2:	690b      	ldr	r3, [r1, #16]
 80025b4:	4606      	mov	r6, r0
 80025b6:	4293      	cmp	r3, r2
 80025b8:	bfb8      	it	lt
 80025ba:	4613      	movlt	r3, r2
 80025bc:	f8c9 3000 	str.w	r3, [r9]
 80025c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025c4:	460c      	mov	r4, r1
 80025c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025ca:	b112      	cbz	r2, 80025d2 <_printf_common+0x2a>
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8c9 3000 	str.w	r3, [r9]
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	0699      	lsls	r1, r3, #26
 80025d6:	bf42      	ittt	mi
 80025d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025dc:	3302      	addmi	r3, #2
 80025de:	f8c9 3000 	strmi.w	r3, [r9]
 80025e2:	6825      	ldr	r5, [r4, #0]
 80025e4:	f015 0506 	ands.w	r5, r5, #6
 80025e8:	d107      	bne.n	80025fa <_printf_common+0x52>
 80025ea:	f104 0a19 	add.w	sl, r4, #25
 80025ee:	68e3      	ldr	r3, [r4, #12]
 80025f0:	f8d9 2000 	ldr.w	r2, [r9]
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	42ab      	cmp	r3, r5
 80025f8:	dc29      	bgt.n	800264e <_printf_common+0xa6>
 80025fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025fe:	6822      	ldr	r2, [r4, #0]
 8002600:	3300      	adds	r3, #0
 8002602:	bf18      	it	ne
 8002604:	2301      	movne	r3, #1
 8002606:	0692      	lsls	r2, r2, #26
 8002608:	d42e      	bmi.n	8002668 <_printf_common+0xc0>
 800260a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800260e:	4639      	mov	r1, r7
 8002610:	4630      	mov	r0, r6
 8002612:	47c0      	blx	r8
 8002614:	3001      	adds	r0, #1
 8002616:	d021      	beq.n	800265c <_printf_common+0xb4>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	68e5      	ldr	r5, [r4, #12]
 800261c:	f003 0306 	and.w	r3, r3, #6
 8002620:	2b04      	cmp	r3, #4
 8002622:	bf18      	it	ne
 8002624:	2500      	movne	r5, #0
 8002626:	f8d9 2000 	ldr.w	r2, [r9]
 800262a:	f04f 0900 	mov.w	r9, #0
 800262e:	bf08      	it	eq
 8002630:	1aad      	subeq	r5, r5, r2
 8002632:	68a3      	ldr	r3, [r4, #8]
 8002634:	6922      	ldr	r2, [r4, #16]
 8002636:	bf08      	it	eq
 8002638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800263c:	4293      	cmp	r3, r2
 800263e:	bfc4      	itt	gt
 8002640:	1a9b      	subgt	r3, r3, r2
 8002642:	18ed      	addgt	r5, r5, r3
 8002644:	341a      	adds	r4, #26
 8002646:	454d      	cmp	r5, r9
 8002648:	d11a      	bne.n	8002680 <_printf_common+0xd8>
 800264a:	2000      	movs	r0, #0
 800264c:	e008      	b.n	8002660 <_printf_common+0xb8>
 800264e:	2301      	movs	r3, #1
 8002650:	4652      	mov	r2, sl
 8002652:	4639      	mov	r1, r7
 8002654:	4630      	mov	r0, r6
 8002656:	47c0      	blx	r8
 8002658:	3001      	adds	r0, #1
 800265a:	d103      	bne.n	8002664 <_printf_common+0xbc>
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002664:	3501      	adds	r5, #1
 8002666:	e7c2      	b.n	80025ee <_printf_common+0x46>
 8002668:	2030      	movs	r0, #48	; 0x30
 800266a:	18e1      	adds	r1, r4, r3
 800266c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002676:	4422      	add	r2, r4
 8002678:	3302      	adds	r3, #2
 800267a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800267e:	e7c4      	b.n	800260a <_printf_common+0x62>
 8002680:	2301      	movs	r3, #1
 8002682:	4622      	mov	r2, r4
 8002684:	4639      	mov	r1, r7
 8002686:	4630      	mov	r0, r6
 8002688:	47c0      	blx	r8
 800268a:	3001      	adds	r0, #1
 800268c:	d0e6      	beq.n	800265c <_printf_common+0xb4>
 800268e:	f109 0901 	add.w	r9, r9, #1
 8002692:	e7d8      	b.n	8002646 <_printf_common+0x9e>

08002694 <_printf_i>:
 8002694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002698:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800269c:	460c      	mov	r4, r1
 800269e:	7e09      	ldrb	r1, [r1, #24]
 80026a0:	b085      	sub	sp, #20
 80026a2:	296e      	cmp	r1, #110	; 0x6e
 80026a4:	4617      	mov	r7, r2
 80026a6:	4606      	mov	r6, r0
 80026a8:	4698      	mov	r8, r3
 80026aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026ac:	f000 80b3 	beq.w	8002816 <_printf_i+0x182>
 80026b0:	d822      	bhi.n	80026f8 <_printf_i+0x64>
 80026b2:	2963      	cmp	r1, #99	; 0x63
 80026b4:	d036      	beq.n	8002724 <_printf_i+0x90>
 80026b6:	d80a      	bhi.n	80026ce <_printf_i+0x3a>
 80026b8:	2900      	cmp	r1, #0
 80026ba:	f000 80b9 	beq.w	8002830 <_printf_i+0x19c>
 80026be:	2958      	cmp	r1, #88	; 0x58
 80026c0:	f000 8083 	beq.w	80027ca <_printf_i+0x136>
 80026c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80026cc:	e032      	b.n	8002734 <_printf_i+0xa0>
 80026ce:	2964      	cmp	r1, #100	; 0x64
 80026d0:	d001      	beq.n	80026d6 <_printf_i+0x42>
 80026d2:	2969      	cmp	r1, #105	; 0x69
 80026d4:	d1f6      	bne.n	80026c4 <_printf_i+0x30>
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	0605      	lsls	r5, r0, #24
 80026dc:	f103 0104 	add.w	r1, r3, #4
 80026e0:	d52a      	bpl.n	8002738 <_printf_i+0xa4>
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6011      	str	r1, [r2, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da03      	bge.n	80026f2 <_printf_i+0x5e>
 80026ea:	222d      	movs	r2, #45	; 0x2d
 80026ec:	425b      	negs	r3, r3
 80026ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80026f2:	486f      	ldr	r0, [pc, #444]	; (80028b0 <_printf_i+0x21c>)
 80026f4:	220a      	movs	r2, #10
 80026f6:	e039      	b.n	800276c <_printf_i+0xd8>
 80026f8:	2973      	cmp	r1, #115	; 0x73
 80026fa:	f000 809d 	beq.w	8002838 <_printf_i+0x1a4>
 80026fe:	d808      	bhi.n	8002712 <_printf_i+0x7e>
 8002700:	296f      	cmp	r1, #111	; 0x6f
 8002702:	d020      	beq.n	8002746 <_printf_i+0xb2>
 8002704:	2970      	cmp	r1, #112	; 0x70
 8002706:	d1dd      	bne.n	80026c4 <_printf_i+0x30>
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	f043 0320 	orr.w	r3, r3, #32
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	e003      	b.n	800271a <_printf_i+0x86>
 8002712:	2975      	cmp	r1, #117	; 0x75
 8002714:	d017      	beq.n	8002746 <_printf_i+0xb2>
 8002716:	2978      	cmp	r1, #120	; 0x78
 8002718:	d1d4      	bne.n	80026c4 <_printf_i+0x30>
 800271a:	2378      	movs	r3, #120	; 0x78
 800271c:	4865      	ldr	r0, [pc, #404]	; (80028b4 <_printf_i+0x220>)
 800271e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002722:	e055      	b.n	80027d0 <_printf_i+0x13c>
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800272a:	1d19      	adds	r1, r3, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6011      	str	r1, [r2, #0]
 8002730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002734:	2301      	movs	r3, #1
 8002736:	e08c      	b.n	8002852 <_printf_i+0x1be>
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800273e:	6011      	str	r1, [r2, #0]
 8002740:	bf18      	it	ne
 8002742:	b21b      	sxthne	r3, r3
 8002744:	e7cf      	b.n	80026e6 <_printf_i+0x52>
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	6825      	ldr	r5, [r4, #0]
 800274a:	1d18      	adds	r0, r3, #4
 800274c:	6010      	str	r0, [r2, #0]
 800274e:	0628      	lsls	r0, r5, #24
 8002750:	d501      	bpl.n	8002756 <_printf_i+0xc2>
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e002      	b.n	800275c <_printf_i+0xc8>
 8002756:	0668      	lsls	r0, r5, #25
 8002758:	d5fb      	bpl.n	8002752 <_printf_i+0xbe>
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	296f      	cmp	r1, #111	; 0x6f
 800275e:	bf14      	ite	ne
 8002760:	220a      	movne	r2, #10
 8002762:	2208      	moveq	r2, #8
 8002764:	4852      	ldr	r0, [pc, #328]	; (80028b0 <_printf_i+0x21c>)
 8002766:	2100      	movs	r1, #0
 8002768:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800276c:	6865      	ldr	r5, [r4, #4]
 800276e:	2d00      	cmp	r5, #0
 8002770:	60a5      	str	r5, [r4, #8]
 8002772:	f2c0 8095 	blt.w	80028a0 <_printf_i+0x20c>
 8002776:	6821      	ldr	r1, [r4, #0]
 8002778:	f021 0104 	bic.w	r1, r1, #4
 800277c:	6021      	str	r1, [r4, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d13d      	bne.n	80027fe <_printf_i+0x16a>
 8002782:	2d00      	cmp	r5, #0
 8002784:	f040 808e 	bne.w	80028a4 <_printf_i+0x210>
 8002788:	4665      	mov	r5, ip
 800278a:	2a08      	cmp	r2, #8
 800278c:	d10b      	bne.n	80027a6 <_printf_i+0x112>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	07db      	lsls	r3, r3, #31
 8002792:	d508      	bpl.n	80027a6 <_printf_i+0x112>
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	6862      	ldr	r2, [r4, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	bfde      	ittt	le
 800279c:	2330      	movle	r3, #48	; 0x30
 800279e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027a6:	ebac 0305 	sub.w	r3, ip, r5
 80027aa:	6123      	str	r3, [r4, #16]
 80027ac:	f8cd 8000 	str.w	r8, [sp]
 80027b0:	463b      	mov	r3, r7
 80027b2:	aa03      	add	r2, sp, #12
 80027b4:	4621      	mov	r1, r4
 80027b6:	4630      	mov	r0, r6
 80027b8:	f7ff fef6 	bl	80025a8 <_printf_common>
 80027bc:	3001      	adds	r0, #1
 80027be:	d14d      	bne.n	800285c <_printf_i+0x1c8>
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	b005      	add	sp, #20
 80027c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027ca:	4839      	ldr	r0, [pc, #228]	; (80028b0 <_printf_i+0x21c>)
 80027cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	6821      	ldr	r1, [r4, #0]
 80027d4:	1d1d      	adds	r5, r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6015      	str	r5, [r2, #0]
 80027da:	060a      	lsls	r2, r1, #24
 80027dc:	d50b      	bpl.n	80027f6 <_printf_i+0x162>
 80027de:	07ca      	lsls	r2, r1, #31
 80027e0:	bf44      	itt	mi
 80027e2:	f041 0120 	orrmi.w	r1, r1, #32
 80027e6:	6021      	strmi	r1, [r4, #0]
 80027e8:	b91b      	cbnz	r3, 80027f2 <_printf_i+0x15e>
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	f022 0220 	bic.w	r2, r2, #32
 80027f0:	6022      	str	r2, [r4, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	e7b7      	b.n	8002766 <_printf_i+0xd2>
 80027f6:	064d      	lsls	r5, r1, #25
 80027f8:	bf48      	it	mi
 80027fa:	b29b      	uxthmi	r3, r3
 80027fc:	e7ef      	b.n	80027de <_printf_i+0x14a>
 80027fe:	4665      	mov	r5, ip
 8002800:	fbb3 f1f2 	udiv	r1, r3, r2
 8002804:	fb02 3311 	mls	r3, r2, r1, r3
 8002808:	5cc3      	ldrb	r3, [r0, r3]
 800280a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800280e:	460b      	mov	r3, r1
 8002810:	2900      	cmp	r1, #0
 8002812:	d1f5      	bne.n	8002800 <_printf_i+0x16c>
 8002814:	e7b9      	b.n	800278a <_printf_i+0xf6>
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	6825      	ldr	r5, [r4, #0]
 800281a:	1d18      	adds	r0, r3, #4
 800281c:	6961      	ldr	r1, [r4, #20]
 800281e:	6010      	str	r0, [r2, #0]
 8002820:	0628      	lsls	r0, r5, #24
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	d501      	bpl.n	800282a <_printf_i+0x196>
 8002826:	6019      	str	r1, [r3, #0]
 8002828:	e002      	b.n	8002830 <_printf_i+0x19c>
 800282a:	066a      	lsls	r2, r5, #25
 800282c:	d5fb      	bpl.n	8002826 <_printf_i+0x192>
 800282e:	8019      	strh	r1, [r3, #0]
 8002830:	2300      	movs	r3, #0
 8002832:	4665      	mov	r5, ip
 8002834:	6123      	str	r3, [r4, #16]
 8002836:	e7b9      	b.n	80027ac <_printf_i+0x118>
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	1d19      	adds	r1, r3, #4
 800283c:	6011      	str	r1, [r2, #0]
 800283e:	681d      	ldr	r5, [r3, #0]
 8002840:	6862      	ldr	r2, [r4, #4]
 8002842:	2100      	movs	r1, #0
 8002844:	4628      	mov	r0, r5
 8002846:	f000 f837 	bl	80028b8 <memchr>
 800284a:	b108      	cbz	r0, 8002850 <_printf_i+0x1bc>
 800284c:	1b40      	subs	r0, r0, r5
 800284e:	6060      	str	r0, [r4, #4]
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	6123      	str	r3, [r4, #16]
 8002854:	2300      	movs	r3, #0
 8002856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800285a:	e7a7      	b.n	80027ac <_printf_i+0x118>
 800285c:	6923      	ldr	r3, [r4, #16]
 800285e:	462a      	mov	r2, r5
 8002860:	4639      	mov	r1, r7
 8002862:	4630      	mov	r0, r6
 8002864:	47c0      	blx	r8
 8002866:	3001      	adds	r0, #1
 8002868:	d0aa      	beq.n	80027c0 <_printf_i+0x12c>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	079b      	lsls	r3, r3, #30
 800286e:	d413      	bmi.n	8002898 <_printf_i+0x204>
 8002870:	68e0      	ldr	r0, [r4, #12]
 8002872:	9b03      	ldr	r3, [sp, #12]
 8002874:	4298      	cmp	r0, r3
 8002876:	bfb8      	it	lt
 8002878:	4618      	movlt	r0, r3
 800287a:	e7a3      	b.n	80027c4 <_printf_i+0x130>
 800287c:	2301      	movs	r3, #1
 800287e:	464a      	mov	r2, r9
 8002880:	4639      	mov	r1, r7
 8002882:	4630      	mov	r0, r6
 8002884:	47c0      	blx	r8
 8002886:	3001      	adds	r0, #1
 8002888:	d09a      	beq.n	80027c0 <_printf_i+0x12c>
 800288a:	3501      	adds	r5, #1
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	9a03      	ldr	r2, [sp, #12]
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	42ab      	cmp	r3, r5
 8002894:	dcf2      	bgt.n	800287c <_printf_i+0x1e8>
 8002896:	e7eb      	b.n	8002870 <_printf_i+0x1dc>
 8002898:	2500      	movs	r5, #0
 800289a:	f104 0919 	add.w	r9, r4, #25
 800289e:	e7f5      	b.n	800288c <_printf_i+0x1f8>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ac      	bne.n	80027fe <_printf_i+0x16a>
 80028a4:	7803      	ldrb	r3, [r0, #0]
 80028a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ae:	e76c      	b.n	800278a <_printf_i+0xf6>
 80028b0:	080054a9 	.word	0x080054a9
 80028b4:	080054ba 	.word	0x080054ba

080028b8 <memchr>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	b2c9      	uxtb	r1, r1
 80028bc:	4402      	add	r2, r0
 80028be:	4290      	cmp	r0, r2
 80028c0:	4603      	mov	r3, r0
 80028c2:	d101      	bne.n	80028c8 <memchr+0x10>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e003      	b.n	80028d0 <memchr+0x18>
 80028c8:	781c      	ldrb	r4, [r3, #0]
 80028ca:	3001      	adds	r0, #1
 80028cc:	428c      	cmp	r4, r1
 80028ce:	d1f6      	bne.n	80028be <memchr+0x6>
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd10      	pop	{r4, pc}

080028d4 <memcpy>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	1e43      	subs	r3, r0, #1
 80028d8:	440a      	add	r2, r1
 80028da:	4291      	cmp	r1, r2
 80028dc:	d100      	bne.n	80028e0 <memcpy+0xc>
 80028de:	bd10      	pop	{r4, pc}
 80028e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028e8:	e7f7      	b.n	80028da <memcpy+0x6>

080028ea <memmove>:
 80028ea:	4288      	cmp	r0, r1
 80028ec:	b510      	push	{r4, lr}
 80028ee:	eb01 0302 	add.w	r3, r1, r2
 80028f2:	d807      	bhi.n	8002904 <memmove+0x1a>
 80028f4:	1e42      	subs	r2, r0, #1
 80028f6:	4299      	cmp	r1, r3
 80028f8:	d00a      	beq.n	8002910 <memmove+0x26>
 80028fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002902:	e7f8      	b.n	80028f6 <memmove+0xc>
 8002904:	4283      	cmp	r3, r0
 8002906:	d9f5      	bls.n	80028f4 <memmove+0xa>
 8002908:	1881      	adds	r1, r0, r2
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	42d3      	cmn	r3, r2
 800290e:	d100      	bne.n	8002912 <memmove+0x28>
 8002910:	bd10      	pop	{r4, pc}
 8002912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002916:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800291a:	e7f7      	b.n	800290c <memmove+0x22>

0800291c <_free_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4605      	mov	r5, r0
 8002920:	2900      	cmp	r1, #0
 8002922:	d043      	beq.n	80029ac <_free_r+0x90>
 8002924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002928:	1f0c      	subs	r4, r1, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bfb8      	it	lt
 800292e:	18e4      	addlt	r4, r4, r3
 8002930:	f000 f8d0 	bl	8002ad4 <__malloc_lock>
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <_free_r+0x94>)
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	4610      	mov	r0, r2
 800293a:	b933      	cbnz	r3, 800294a <_free_r+0x2e>
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	6014      	str	r4, [r2, #0]
 8002940:	4628      	mov	r0, r5
 8002942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002946:	f000 b8c6 	b.w	8002ad6 <__malloc_unlock>
 800294a:	42a3      	cmp	r3, r4
 800294c:	d90b      	bls.n	8002966 <_free_r+0x4a>
 800294e:	6821      	ldr	r1, [r4, #0]
 8002950:	1862      	adds	r2, r4, r1
 8002952:	4293      	cmp	r3, r2
 8002954:	bf01      	itttt	eq
 8002956:	681a      	ldreq	r2, [r3, #0]
 8002958:	685b      	ldreq	r3, [r3, #4]
 800295a:	1852      	addeq	r2, r2, r1
 800295c:	6022      	streq	r2, [r4, #0]
 800295e:	6063      	str	r3, [r4, #4]
 8002960:	6004      	str	r4, [r0, #0]
 8002962:	e7ed      	b.n	8002940 <_free_r+0x24>
 8002964:	4613      	mov	r3, r2
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	b10a      	cbz	r2, 800296e <_free_r+0x52>
 800296a:	42a2      	cmp	r2, r4
 800296c:	d9fa      	bls.n	8002964 <_free_r+0x48>
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	1858      	adds	r0, r3, r1
 8002972:	42a0      	cmp	r0, r4
 8002974:	d10b      	bne.n	800298e <_free_r+0x72>
 8002976:	6820      	ldr	r0, [r4, #0]
 8002978:	4401      	add	r1, r0
 800297a:	1858      	adds	r0, r3, r1
 800297c:	4282      	cmp	r2, r0
 800297e:	6019      	str	r1, [r3, #0]
 8002980:	d1de      	bne.n	8002940 <_free_r+0x24>
 8002982:	6810      	ldr	r0, [r2, #0]
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	4401      	add	r1, r0
 8002988:	6019      	str	r1, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	e7d8      	b.n	8002940 <_free_r+0x24>
 800298e:	d902      	bls.n	8002996 <_free_r+0x7a>
 8002990:	230c      	movs	r3, #12
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	e7d4      	b.n	8002940 <_free_r+0x24>
 8002996:	6820      	ldr	r0, [r4, #0]
 8002998:	1821      	adds	r1, r4, r0
 800299a:	428a      	cmp	r2, r1
 800299c:	bf01      	itttt	eq
 800299e:	6811      	ldreq	r1, [r2, #0]
 80029a0:	6852      	ldreq	r2, [r2, #4]
 80029a2:	1809      	addeq	r1, r1, r0
 80029a4:	6021      	streq	r1, [r4, #0]
 80029a6:	6062      	str	r2, [r4, #4]
 80029a8:	605c      	str	r4, [r3, #4]
 80029aa:	e7c9      	b.n	8002940 <_free_r+0x24>
 80029ac:	bd38      	pop	{r3, r4, r5, pc}
 80029ae:	bf00      	nop
 80029b0:	200000ac 	.word	0x200000ac

080029b4 <_malloc_r>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	1ccd      	adds	r5, r1, #3
 80029b8:	f025 0503 	bic.w	r5, r5, #3
 80029bc:	3508      	adds	r5, #8
 80029be:	2d0c      	cmp	r5, #12
 80029c0:	bf38      	it	cc
 80029c2:	250c      	movcc	r5, #12
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	4606      	mov	r6, r0
 80029c8:	db01      	blt.n	80029ce <_malloc_r+0x1a>
 80029ca:	42a9      	cmp	r1, r5
 80029cc:	d903      	bls.n	80029d6 <_malloc_r+0x22>
 80029ce:	230c      	movs	r3, #12
 80029d0:	6033      	str	r3, [r6, #0]
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	f000 f87d 	bl	8002ad4 <__malloc_lock>
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <_malloc_r+0xac>)
 80029dc:	6814      	ldr	r4, [r2, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	b991      	cbnz	r1, 8002a08 <_malloc_r+0x54>
 80029e2:	4c20      	ldr	r4, [pc, #128]	; (8002a64 <_malloc_r+0xb0>)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	b91b      	cbnz	r3, 80029f0 <_malloc_r+0x3c>
 80029e8:	4630      	mov	r0, r6
 80029ea:	f000 f863 	bl	8002ab4 <_sbrk_r>
 80029ee:	6020      	str	r0, [r4, #0]
 80029f0:	4629      	mov	r1, r5
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 f85e 	bl	8002ab4 <_sbrk_r>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d124      	bne.n	8002a46 <_malloc_r+0x92>
 80029fc:	230c      	movs	r3, #12
 80029fe:	4630      	mov	r0, r6
 8002a00:	6033      	str	r3, [r6, #0]
 8002a02:	f000 f868 	bl	8002ad6 <__malloc_unlock>
 8002a06:	e7e4      	b.n	80029d2 <_malloc_r+0x1e>
 8002a08:	680b      	ldr	r3, [r1, #0]
 8002a0a:	1b5b      	subs	r3, r3, r5
 8002a0c:	d418      	bmi.n	8002a40 <_malloc_r+0x8c>
 8002a0e:	2b0b      	cmp	r3, #11
 8002a10:	d90f      	bls.n	8002a32 <_malloc_r+0x7e>
 8002a12:	600b      	str	r3, [r1, #0]
 8002a14:	18cc      	adds	r4, r1, r3
 8002a16:	50cd      	str	r5, [r1, r3]
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 f85c 	bl	8002ad6 <__malloc_unlock>
 8002a1e:	f104 000b 	add.w	r0, r4, #11
 8002a22:	1d23      	adds	r3, r4, #4
 8002a24:	f020 0007 	bic.w	r0, r0, #7
 8002a28:	1ac3      	subs	r3, r0, r3
 8002a2a:	d0d3      	beq.n	80029d4 <_malloc_r+0x20>
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	50e2      	str	r2, [r4, r3]
 8002a30:	e7d0      	b.n	80029d4 <_malloc_r+0x20>
 8002a32:	684b      	ldr	r3, [r1, #4]
 8002a34:	428c      	cmp	r4, r1
 8002a36:	bf16      	itet	ne
 8002a38:	6063      	strne	r3, [r4, #4]
 8002a3a:	6013      	streq	r3, [r2, #0]
 8002a3c:	460c      	movne	r4, r1
 8002a3e:	e7eb      	b.n	8002a18 <_malloc_r+0x64>
 8002a40:	460c      	mov	r4, r1
 8002a42:	6849      	ldr	r1, [r1, #4]
 8002a44:	e7cc      	b.n	80029e0 <_malloc_r+0x2c>
 8002a46:	1cc4      	adds	r4, r0, #3
 8002a48:	f024 0403 	bic.w	r4, r4, #3
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d005      	beq.n	8002a5c <_malloc_r+0xa8>
 8002a50:	1a21      	subs	r1, r4, r0
 8002a52:	4630      	mov	r0, r6
 8002a54:	f000 f82e 	bl	8002ab4 <_sbrk_r>
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d0cf      	beq.n	80029fc <_malloc_r+0x48>
 8002a5c:	6025      	str	r5, [r4, #0]
 8002a5e:	e7db      	b.n	8002a18 <_malloc_r+0x64>
 8002a60:	200000ac 	.word	0x200000ac
 8002a64:	200000b0 	.word	0x200000b0

08002a68 <_realloc_r>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	4607      	mov	r7, r0
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	460e      	mov	r6, r1
 8002a70:	b921      	cbnz	r1, 8002a7c <_realloc_r+0x14>
 8002a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a76:	4611      	mov	r1, r2
 8002a78:	f7ff bf9c 	b.w	80029b4 <_malloc_r>
 8002a7c:	b922      	cbnz	r2, 8002a88 <_realloc_r+0x20>
 8002a7e:	f7ff ff4d 	bl	800291c <_free_r>
 8002a82:	4625      	mov	r5, r4
 8002a84:	4628      	mov	r0, r5
 8002a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a88:	f000 f826 	bl	8002ad8 <_malloc_usable_size_r>
 8002a8c:	42a0      	cmp	r0, r4
 8002a8e:	d20f      	bcs.n	8002ab0 <_realloc_r+0x48>
 8002a90:	4621      	mov	r1, r4
 8002a92:	4638      	mov	r0, r7
 8002a94:	f7ff ff8e 	bl	80029b4 <_malloc_r>
 8002a98:	4605      	mov	r5, r0
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d0f2      	beq.n	8002a84 <_realloc_r+0x1c>
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	f7ff ff17 	bl	80028d4 <memcpy>
 8002aa6:	4631      	mov	r1, r6
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	f7ff ff37 	bl	800291c <_free_r>
 8002aae:	e7e9      	b.n	8002a84 <_realloc_r+0x1c>
 8002ab0:	4635      	mov	r5, r6
 8002ab2:	e7e7      	b.n	8002a84 <_realloc_r+0x1c>

08002ab4 <_sbrk_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	4c05      	ldr	r4, [pc, #20]	; (8002ad0 <_sbrk_r+0x1c>)
 8002aba:	4605      	mov	r5, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	f7fe fa2a 	bl	8000f18 <_sbrk>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_sbrk_r+0x1a>
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_sbrk_r+0x1a>
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	20000114 	.word	0x20000114

08002ad4 <__malloc_lock>:
 8002ad4:	4770      	bx	lr

08002ad6 <__malloc_unlock>:
 8002ad6:	4770      	bx	lr

08002ad8 <_malloc_usable_size_r>:
 8002ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002adc:	1f18      	subs	r0, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bfbc      	itt	lt
 8002ae2:	580b      	ldrlt	r3, [r1, r0]
 8002ae4:	18c0      	addlt	r0, r0, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
