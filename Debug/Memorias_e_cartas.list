
Memorias_e_cartas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000299c  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080052b8  080052b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b8  080052b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000088  08005348  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005348  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074cd  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161b  00000000  00000000  0002757e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  00028ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017085  00000000  00000000  000292e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000063a6  00000000  00000000  0004036d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000828a3  00000000  00000000  00046713  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c8fb6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000678  00000000  00000000  000c9038  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001f40  00000000  00000000  000c96b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002904 	.word	0x08002904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002904 	.word	0x08002904

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 f925 	bl	80013aa <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 f920 	bl	80013aa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f001 fda0 	bl	8001cb8 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 f914 	bl	80013aa <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200000b4 	.word	0x200000b4

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 f8ff 	bl	80013aa <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 f8fa 	bl	80013aa <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f001 fd72 	bl	8001cb8 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 f8db 	bl	80013aa <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	200000b4 	.word	0x200000b4

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 f8c7 	bl	80013aa <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 f8c2 	bl	80013aa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f001 fd42 	bl	8001cb8 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 f8b6 	bl	80013aa <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200000b4 	.word	0x200000b4

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 f86b 	bl	80013aa <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 f829 	bl	80013aa <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f000 fda6 	bl	8000ebc <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 f818 	bl	80013aa <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f000 fd9e 	bl	8000ebc <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 f810 	bl	80013aa <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f000 fd96 	bl	8000ebc <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f000 fd1e 	bl	8000ebc <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	0800291c 	.word	0x0800291c
 8000498:	08002924 	.word	0x08002924
 800049c:	08002934 	.word	0x08002934

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000500:	b082      	sub	sp, #8
 8000502:	b590      	push	{r4, r7, lr}
 8000504:	b089      	sub	sp, #36	; 0x24
 8000506:	af00      	add	r7, sp, #0
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
 800050e:	460b      	mov	r3, r1
 8000510:	80bb      	strh	r3, [r7, #4]
 8000512:	4613      	mov	r3, r2
 8000514:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	4838      	ldr	r0, [pc, #224]	; (80005fc <ST7789_WriteChar+0xfc>)
 800051c:	f000 ff45 	bl	80013aa <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000520:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000524:	b29a      	uxth	r2, r3
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	b29c      	uxth	r4, r3
 8000530:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000534:	b29a      	uxth	r2, r3
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	b29b      	uxth	r3, r3
 800053c:	3b01      	subs	r3, #1
 800053e:	b29b      	uxth	r3, r3
 8000540:	88b9      	ldrh	r1, [r7, #4]
 8000542:	88f8      	ldrh	r0, [r7, #6]
 8000544:	4622      	mov	r2, r4
 8000546:	f7ff feb1 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	e043      	b.n	80005d8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	3b20      	subs	r3, #32
 8000556:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800055a:	fb01 f303 	mul.w	r3, r1, r3
 800055e:	4619      	mov	r1, r3
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	440b      	add	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	e029      	b.n	80005c6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00e      	beq.n	80005a0 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	743b      	strb	r3, [r7, #16]
 800058c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800058e:	b2db      	uxtb	r3, r3
 8000590:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2102      	movs	r1, #2
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdfd 	bl	8000198 <ST7789_WriteData>
 800059e:	e00f      	b.n	80005c0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80005a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	733b      	strb	r3, [r7, #12]
 80005ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fdec 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	3301      	adds	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
 80005c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80005ca:	461a      	mov	r2, r3
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d3cf      	bcc.n	8000572 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3301      	adds	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005dc:	461a      	mov	r2, r3
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d3b5      	bcc.n	8000550 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <ST7789_WriteChar+0xfc>)
 80005ea:	f000 fede 	bl	80013aa <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	3724      	adds	r7, #36	; 0x24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005f8:	b002      	add	sp, #8
 80005fa:	4770      	bx	lr
 80005fc:	40010800 	.word	0x40010800

08000600 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000600:	b082      	sub	sp, #8
 8000602:	b580      	push	{r7, lr}
 8000604:	b088      	sub	sp, #32
 8000606:	af04      	add	r7, sp, #16
 8000608:	603a      	str	r2, [r7, #0]
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
 8000610:	460b      	mov	r3, r1
 8000612:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000614:	2200      	movs	r2, #0
 8000616:	2110      	movs	r1, #16
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <ST7789_WriteString+0xb4>)
 800061a:	f000 fec6 	bl	80013aa <HAL_GPIO_WritePin>
	const start_x = x;
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000622:	e035      	b.n	8000690 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	7f3a      	ldrb	r2, [r7, #28]
 8000628:	4413      	add	r3, r2
 800062a:	2bef      	cmp	r3, #239	; 0xef
 800062c:	dc03      	bgt.n	8000636 <ST7789_WriteString+0x36>
				|| *str == '\n') {
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d117      	bne.n	8000666 <ST7789_WriteString+0x66>
			x = start_x;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800063a:	7f7b      	ldrb	r3, [r7, #29]
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	7f7a      	ldrb	r2, [r7, #29]
 8000648:	4413      	add	r3, r2
 800064a:	2bef      	cmp	r3, #239	; 0xef
 800064c:	dc25      	bgt.n	800069a <ST7789_WriteString+0x9a>
				break;
			}

			if (*str == ' ' || *str == '\n') {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b20      	cmp	r3, #32
 8000654:	d003      	beq.n	800065e <ST7789_WriteString+0x5e>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d103      	bne.n	8000666 <ST7789_WriteString+0x66>
				// skip spaces in the beginning of the new line
				str++;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
				continue;
 8000664:	e014      	b.n	8000690 <ST7789_WriteString+0x90>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	88b9      	ldrh	r1, [r7, #4]
 800066c:	88f8      	ldrh	r0, [r7, #6]
 800066e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	f7ff ff40 	bl	8000500 <ST7789_WriteChar>
		x += font.width;
 8000680:	7f3b      	ldrb	r3, [r7, #28]
 8000682:	b29a      	uxth	r2, r3
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4413      	add	r3, r2
 8000688:	80fb      	strh	r3, [r7, #6]
		str++;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1c5      	bne.n	8000624 <ST7789_WriteString+0x24>
 8000698:	e000      	b.n	800069c <ST7789_WriteString+0x9c>
				break;
 800069a:	bf00      	nop
	}
	ST7789_UnSelect();
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <ST7789_WriteString+0xb4>)
 80006a2:	f000 fe82 	bl	80013aa <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b0:	b002      	add	sp, #8
 80006b2:	4770      	bx	lr
 80006b4:	40010800 	.word	0x40010800

080006b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f000 fb9b 	bl	8000df8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f814 	bl	80006ee <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f000 f889 	bl	80007dc <MX_GPIO_Init>
	MX_SPI1_Init();
 80006ca:	f000 f851 	bl	8000770 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	ST7789_Init();
 80006ce:	f7ff fe49 	bl	8000364 <ST7789_Init>
	Menu();
 80006d2:	f000 f8e3 	bl	800089c <Menu>
	AwaitForAnyButton();
 80006d6:	f000 f9ff 	bl	8000ad8 <AwaitForAnyButton>
	SelectDifficulty();
 80006da:	f000 f9c7 	bl	8000a6c <SelectDifficulty>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		char Buttons[4];
		DetectAnyButtonPress(Buttons);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa0c 	bl	8000afe <DetectAnyButtonPress>
		HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fbe8 	bl	8000ebc <HAL_Delay>
	while (1) {
 80006ec:	e7f7      	b.n	80006de <main+0x26>

080006ee <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b090      	sub	sp, #64	; 0x40
 80006f2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	2228      	movs	r2, #40	; 0x28
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fce7 	bl	80020d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000724:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe54 	bl	80013dc <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x50>
		Error_Handler();
 800073a:	f000 fa53 	bl	8000be4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2102      	movs	r1, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f8bf 	bl	80018dc <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x7a>
		Error_Handler();
 8000764:	f000 fa3e 	bl	8000be4 <Error_Handler>
	}
}
 8000768:	bf00      	nop
 800076a:	3740      	adds	r7, #64	; 0x40
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000790:	2202      	movs	r2, #2
 8000792:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007a4:	2208      	movs	r2, #8
 80007a6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007c2:	f001 f9f5 	bl	8001bb0 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80007cc:	f000 fa0a 	bl	8000be4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_GPIO_Init+0xb4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <MX_GPIO_Init+0xb4>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_GPIO_Init+0xb4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_GPIO_Init+0xb4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <MX_GPIO_Init+0xb4>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_GPIO_Init+0xb4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000826:	f000 fdc0 	bl	80013aa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin | ST7789_RST_Pin | GPIO_PIN_3,
 800082a:	2200      	movs	r2, #0
 800082c:	210b      	movs	r1, #11
 800082e:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000830:	f000 fdbb 	bl	80013aa <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : ST7789_CS_Pin */
	GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000834:	2310      	movs	r3, #16
 8000836:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4619      	mov	r1, r3
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_GPIO_Init+0xb8>)
 800084c:	f000 fc3c 	bl	80010c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin PB3 */
	GPIO_InitStruct.Pin = ST7789_DC_Pin | ST7789_RST_Pin | GPIO_PIN_3;
 8000850:	230b      	movs	r3, #11
 8000852:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000868:	f000 fc2e 	bl	80010c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800086c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000870:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0xb8>)
 8000882:	f000 fc21 	bl	80010c8 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00

0800089c <Menu>:

/* USER CODE BEGIN 4 */

void Menu() {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af04      	add	r7, sp, #16
	ST7789_WriteString(90, 60, "MENU", Font_16x26, WHITE, BLACK);
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <Menu+0xa8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	9202      	str	r2, [sp, #8]
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	9200      	str	r2, [sp, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <Menu+0xac>)
 80008b6:	213c      	movs	r1, #60	; 0x3c
 80008b8:	205a      	movs	r0, #90	; 0x5a
 80008ba:	f7ff fea1 	bl	8000600 <ST7789_WriteString>
	ST7789_WriteString(60, 120, "New Game", Font_11x18, WHITE, BLACK);
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <Menu+0xb0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	9200      	str	r2, [sp, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <Menu+0xb4>)
 80008d2:	2178      	movs	r1, #120	; 0x78
 80008d4:	203c      	movs	r0, #60	; 0x3c
 80008d6:	f7ff fe93 	bl	8000600 <ST7789_WriteString>
	char *result;
	sprintf(result, "Record: %i", record);
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <Menu+0xb8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	491d      	ldr	r1, [pc, #116]	; (8000958 <Menu+0xbc>)
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f001 fbfc 	bl	80020e0 <siprintf>
	ST7789_WriteString(60, 140, result, Font_11x18, WHITE, BLACK);
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <Menu+0xb0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	9202      	str	r2, [sp, #8]
 80008ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	218c      	movs	r1, #140	; 0x8c
 80008fe:	203c      	movs	r0, #60	; 0x3c
 8000900:	f7ff fe7e 	bl	8000600 <ST7789_WriteString>

	ST7789_WriteString(36, 180, "Pressione qualquer botao", Font_7x10, WHITE,
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <Menu+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	9202      	str	r2, [sp, #8]
 800090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090e:	9201      	str	r2, [sp, #4]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	9200      	str	r2, [sp, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <Menu+0xc4>)
 8000918:	21b4      	movs	r1, #180	; 0xb4
 800091a:	2024      	movs	r0, #36	; 0x24
 800091c:	f7ff fe70 	bl	8000600 <ST7789_WriteString>
	BLACK);
	ST7789_WriteString(82, 190, "Pra comecar", Font_7x10, WHITE, BLACK);
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <Menu+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	9202      	str	r2, [sp, #8]
 8000926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092a:	9201      	str	r2, [sp, #4]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <Menu+0xc8>)
 8000934:	21be      	movs	r1, #190	; 0xbe
 8000936:	2052      	movs	r0, #82	; 0x52
 8000938:	f7ff fe62 	bl	8000600 <ST7789_WriteString>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000010 	.word	0x20000010
 8000948:	080029d8 	.word	0x080029d8
 800094c:	20000008 	.word	0x20000008
 8000950:	080029e0 	.word	0x080029e0
 8000954:	200000a4 	.word	0x200000a4
 8000958:	080029ec 	.word	0x080029ec
 800095c:	20000000 	.word	0x20000000
 8000960:	080029f8 	.word	0x080029f8
 8000964:	08002a14 	.word	0x08002a14

08000968 <PrintSelectDifficulty>:
void PrintSelectDifficulty(char SelectedColor) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af04      	add	r7, sp, #16
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	ST7789_Fill_Color(BLACK);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fd94 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(20, 30, "Selecione uma\ndificuldade:", Font_11x18, WHITE,
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 800097a:	2200      	movs	r2, #0
 800097c:	9202      	str	r2, [sp, #8]
 800097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000982:	9201      	str	r2, [sp, #4]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a35      	ldr	r2, [pc, #212]	; (8000a60 <PrintSelectDifficulty+0xf8>)
 800098c:	211e      	movs	r1, #30
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fe36 	bl	8000600 <ST7789_WriteString>
	BLACK);

	switch (SelectedColor) {
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d021      	beq.n	80009de <PrintSelectDifficulty+0x76>
 800099a:	2b02      	cmp	r3, #2
 800099c:	d03c      	beq.n	8000a18 <PrintSelectDifficulty+0xb0>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d000      	beq.n	80009a4 <PrintSelectDifficulty+0x3c>
	case 2:
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, WHITE, BLACK);
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, YELLOW, BLACK);
		break;
	default:
		break;
 80009a2:	e056      	b.n	8000a52 <PrintSelectDifficulty+0xea>
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, WHITE, BLACK);
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	9202      	str	r2, [sp, #8]
 80009aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ae:	9201      	str	r2, [sp, #4]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <PrintSelectDifficulty+0xfc>)
 80009b8:	2178      	movs	r1, #120	; 0x78
 80009ba:	200a      	movs	r0, #10
 80009bc:	f7ff fe20 	bl	8000600 <ST7789_WriteString>
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, WHITE, BLACK);
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	9202      	str	r2, [sp, #8]
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	9200      	str	r2, [sp, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <PrintSelectDifficulty+0x100>)
 80009d4:	218c      	movs	r1, #140	; 0x8c
 80009d6:	200a      	movs	r0, #10
 80009d8:	f7ff fe12 	bl	8000600 <ST7789_WriteString>
		break;
 80009dc:	e039      	b.n	8000a52 <PrintSelectDifficulty+0xea>
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, YELLOW, BLACK);
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	9202      	str	r2, [sp, #8]
 80009e4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	9200      	str	r2, [sp, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <PrintSelectDifficulty+0xfc>)
 80009f2:	2178      	movs	r1, #120	; 0x78
 80009f4:	200a      	movs	r0, #10
 80009f6:	f7ff fe03 	bl	8000600 <ST7789_WriteString>
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, WHITE, BLACK);
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	9202      	str	r2, [sp, #8]
 8000a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a04:	9201      	str	r2, [sp, #4]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	9200      	str	r2, [sp, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <PrintSelectDifficulty+0x100>)
 8000a0e:	218c      	movs	r1, #140	; 0x8c
 8000a10:	200a      	movs	r0, #10
 8000a12:	f7ff fdf5 	bl	8000600 <ST7789_WriteString>
		break;
 8000a16:	e01c      	b.n	8000a52 <PrintSelectDifficulty+0xea>
		ST7789_WriteString(10, 120, "- 4x4", Font_11x18, WHITE, BLACK);
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	9202      	str	r2, [sp, #8]
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	9201      	str	r2, [sp, #4]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <PrintSelectDifficulty+0xfc>)
 8000a2c:	2178      	movs	r1, #120	; 0x78
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f7ff fde6 	bl	8000600 <ST7789_WriteString>
		ST7789_WriteString(10, 140, "- 6x6", Font_11x18, YELLOW, BLACK);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <PrintSelectDifficulty+0xf4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	9202      	str	r2, [sp, #8]
 8000a3a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <PrintSelectDifficulty+0x100>)
 8000a48:	218c      	movs	r1, #140	; 0x8c
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f7ff fdd8 	bl	8000600 <ST7789_WriteString>
		break;
 8000a50:	bf00      	nop
	}

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	08002a20 	.word	0x08002a20
 8000a64:	08002a3c 	.word	0x08002a3c
 8000a68:	08002a44 	.word	0x08002a44

08000a6c <SelectDifficulty>:
void SelectDifficulty(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	PrintSelectDifficulty(0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff79 	bl	8000968 <PrintSelectDifficulty>

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <ReadButtons>:

}
void ExibirFimDeJogo(void) {

}
void ReadButtons(char *out) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	out[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <ReadButtons+0x58>)
 8000a8a:	f000 fc77 	bl	800137c <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	701a      	strb	r2, [r3, #0]
	out[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	1c5c      	adds	r4, r3, #1
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <ReadButtons+0x58>)
 8000aa0:	f000 fc6c 	bl	800137c <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	7023      	strb	r3, [r4, #0]
	out[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1c9c      	adds	r4, r3, #2
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <ReadButtons+0x58>)
 8000ab2:	f000 fc63 	bl	800137c <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	7023      	strb	r3, [r4, #0]
	out[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1cdc      	adds	r4, r3, #3
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <ReadButtons+0x58>)
 8000ac4:	f000 fc5a 	bl	800137c <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	7023      	strb	r3, [r4, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40010800 	.word	0x40010800

08000ad8 <AwaitForAnyButton>:
void AwaitForAnyButton(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	char buttons[4];

	do {
		ReadButtons(buttons);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ffcb 	bl	8000a7c <ReadButtons>
	} while (!Contain(buttons, 0));
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f859 	bl	8000ba2 <Contain>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f3      	beq.n	8000ade <AwaitForAnyButton+0x6>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <DetectAnyButtonPress>:
void DetectAnyButtonPress(char *out) {
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b088      	sub	sp, #32
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	char buttons[4];
	long btnPressTime = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
	int time = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 4; ++i)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	e007      	b.n	8000b24 <DetectAnyButtonPress+0x26>
		out[i] = 1;
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i)
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	ddf4      	ble.n	8000b14 <DetectAnyButtonPress+0x16>

	do {
		ReadButtons(buttons);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffa4 	bl	8000a7c <ReadButtons>
	} while (!Contain(buttons, 0));
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f831 	bl	8000ba2 <Contain>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f1      	beq.n	8000b2a <DetectAnyButtonPress+0x2c>

	btnPressTime = HAL_GetTick();
 8000b46:	f000 f9af 	bl	8000ea8 <HAL_GetTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	617b      	str	r3, [r7, #20]

	do {
		for (int i = 0; i < 4; ++i)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	e011      	b.n	8000b78 <DetectAnyButtonPress+0x7a>
			if (out[i] != 0)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <DetectAnyButtonPress+0x74>
				out[i] = buttons[i];
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	f107 010c 	add.w	r1, r7, #12
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	440a      	add	r2, r1
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; ++i)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	3301      	adds	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	ddea      	ble.n	8000b54 <DetectAnyButtonPress+0x56>

		time = HAL_GetTick() - btnPressTime;
 8000b7e:	f000 f993 	bl	8000ea8 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	613b      	str	r3, [r7, #16]
		ReadButtons(buttons);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff74 	bl	8000a7c <ReadButtons>
	} while (time < 100);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2b63      	cmp	r3, #99	; 0x63
 8000b98:	ddd9      	ble.n	8000b4e <DetectAnyButtonPress+0x50>
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <Contain>:
void DetectButtonPress(uint16_t buttons[], char *out) {
	bool botao;
}

char Contain(char *Iterable, char Contains) {
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
	int IterSize = sizeof(Iterable) / sizeof(char);
 8000bae:	2304      	movs	r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < IterSize; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e00b      	b.n	8000bd0 <Contain+0x2e>
		if (Iterable[i] == Contains) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d101      	bne.n	8000bca <Contain+0x28>
			return 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e007      	b.n	8000bda <Contain+0x38>
	for (int i = 0; i < IterSize; i++) {
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbef      	blt.n	8000bb8 <Contain+0x16>
		}
	}
	return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bea:	e7fe      	b.n	8000bea <Error_Handler+0x6>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12f      	bne.n	8000cd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000cb4:	f000 fa08 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000ccc:	f000 f9fc 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f8ab 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f001 f98a 	bl	800207c <__errno>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20005000 	.word	0x20005000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000a8 	.word	0x200000a8
 8000d9c:	20000118 	.word	0x20000118

08000da0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd2:	f7ff ffe5 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f001 f957 	bl	8002088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff fc6d 	bl	80006b8 <main>
  bx lr
 8000dde:	4770      	bx	lr
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000de8:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8000dec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000df0:	20000114 	.word	0x20000114

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f929 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff feea 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f933 	bl	80010ae <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f909 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000018 	.word	0x20000018
 8000e7c:	20000020 	.word	0x20000020
 8000e80:	2000001c 	.word	0x2000001c

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000020 	.word	0x20000020
 8000ea4:	2000010c 	.word	0x2000010c

08000ea8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	2000010c 	.word	0x2000010c

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff fff0 	bl	8000ea8 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffe0 	bl	8000ea8 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000020 	.word	0x20000020

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff90 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff49 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff5e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff90 	bl	8000fb8 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5f 	bl	8000f64 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffb0 	bl	800101c <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b08b      	sub	sp, #44	; 0x2c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e127      	b.n	800132c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010dc:	2201      	movs	r2, #1
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 8116 	bne.w	8001326 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d034      	beq.n	800116c <HAL_GPIO_Init+0xa4>
 8001102:	2b12      	cmp	r3, #18
 8001104:	d80d      	bhi.n	8001122 <HAL_GPIO_Init+0x5a>
 8001106:	2b02      	cmp	r3, #2
 8001108:	d02b      	beq.n	8001162 <HAL_GPIO_Init+0x9a>
 800110a:	2b02      	cmp	r3, #2
 800110c:	d804      	bhi.n	8001118 <HAL_GPIO_Init+0x50>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d031      	beq.n	8001176 <HAL_GPIO_Init+0xae>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d01c      	beq.n	8001150 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001116:	e048      	b.n	80011aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001118:	2b03      	cmp	r3, #3
 800111a:	d043      	beq.n	80011a4 <HAL_GPIO_Init+0xdc>
 800111c:	2b11      	cmp	r3, #17
 800111e:	d01b      	beq.n	8001158 <HAL_GPIO_Init+0x90>
          break;
 8001120:	e043      	b.n	80011aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001122:	4a89      	ldr	r2, [pc, #548]	; (8001348 <HAL_GPIO_Init+0x280>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d026      	beq.n	8001176 <HAL_GPIO_Init+0xae>
 8001128:	4a87      	ldr	r2, [pc, #540]	; (8001348 <HAL_GPIO_Init+0x280>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d806      	bhi.n	800113c <HAL_GPIO_Init+0x74>
 800112e:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_GPIO_Init+0x284>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d020      	beq.n	8001176 <HAL_GPIO_Init+0xae>
 8001134:	4a86      	ldr	r2, [pc, #536]	; (8001350 <HAL_GPIO_Init+0x288>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01d      	beq.n	8001176 <HAL_GPIO_Init+0xae>
          break;
 800113a:	e036      	b.n	80011aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800113c:	4a85      	ldr	r2, [pc, #532]	; (8001354 <HAL_GPIO_Init+0x28c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0xae>
 8001142:	4a85      	ldr	r2, [pc, #532]	; (8001358 <HAL_GPIO_Init+0x290>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d016      	beq.n	8001176 <HAL_GPIO_Init+0xae>
 8001148:	4a84      	ldr	r2, [pc, #528]	; (800135c <HAL_GPIO_Init+0x294>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xae>
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e028      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e023      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01e      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e019      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e012      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e008      	b.n	80011aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2bff      	cmp	r3, #255	; 0xff
 80011ae:	d801      	bhi.n	80011b4 <HAL_GPIO_Init+0xec>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	e001      	b.n	80011b8 <HAL_GPIO_Init+0xf0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3304      	adds	r3, #4
 80011b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2bff      	cmp	r3, #255	; 0xff
 80011be:	d802      	bhi.n	80011c6 <HAL_GPIO_Init+0xfe>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x104>
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	3b08      	subs	r3, #8
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	210f      	movs	r1, #15
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	401a      	ands	r2, r3
 80011de:	6a39      	ldr	r1, [r7, #32]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	431a      	orrs	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8096 	beq.w	8001326 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b59      	ldr	r3, [pc, #356]	; (8001360 <HAL_GPIO_Init+0x298>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a58      	ldr	r2, [pc, #352]	; (8001360 <HAL_GPIO_Init+0x298>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <HAL_GPIO_Init+0x298>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001212:	4a54      	ldr	r2, [pc, #336]	; (8001364 <HAL_GPIO_Init+0x29c>)
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x2a0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x19e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x2a4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x19a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_GPIO_Init+0x2a8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x196>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2ac>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x192>
 8001256:	2303      	movs	r3, #3
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x1a0>
 800125a:	2304      	movs	r3, #4
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x1a0>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x1a0>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x1a0>
 8001266:	2300      	movs	r3, #0
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001278:	493a      	ldr	r1, [pc, #232]	; (8001364 <HAL_GPIO_Init+0x29c>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001292:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4933      	ldr	r1, [pc, #204]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	492e      	ldr	r1, [pc, #184]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
 80012c6:	e006      	b.n	80012d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4929      	ldr	r1, [pc, #164]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	491f      	ldr	r1, [pc, #124]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	491a      	ldr	r1, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	60cb      	str	r3, [r1, #12]
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4915      	ldr	r1, [pc, #84]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 8001322:	4013      	ands	r3, r2
 8001324:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f aed0 	bne.w	80010dc <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	372c      	adds	r7, #44	; 0x2c
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	10210000 	.word	0x10210000
 800134c:	10110000 	.word	0x10110000
 8001350:	10120000 	.word	0x10120000
 8001354:	10310000 	.word	0x10310000
 8001358:	10320000 	.word	0x10320000
 800135c:	10220000 	.word	0x10220000
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000
 8001368:	40010800 	.word	0x40010800
 800136c:	40010c00 	.word	0x40010c00
 8001370:	40011000 	.word	0x40011000
 8001374:	40011400 	.word	0x40011400
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]
 80013b6:	4613      	mov	r3, r2
 80013b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ba:	787b      	ldrb	r3, [r7, #1]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	041a      	lsls	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	611a      	str	r2, [r3, #16]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e26c      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8087 	beq.w	800150a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b04      	cmp	r3, #4
 8001406:	d00c      	beq.n	8001422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001408:	4b8f      	ldr	r3, [pc, #572]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d112      	bne.n	800143a <HAL_RCC_OscConfig+0x5e>
 8001414:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d10b      	bne.n	800143a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d06c      	beq.n	8001508 <HAL_RCC_OscConfig+0x12c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d168      	bne.n	8001508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e246      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x76>
 8001444:	4b80      	ldr	r3, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a7f      	ldr	r2, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e02e      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7a      	ldr	r2, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a77      	ldr	r2, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e01d      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0xbc>
 800147e:	4b72      	ldr	r3, [pc, #456]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a71      	ldr	r2, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b6f      	ldr	r3, [pc, #444]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6e      	ldr	r2, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0xd4>
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a67      	ldr	r2, [pc, #412]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fcf6 	bl	8000ea8 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fcf2 	bl	8000ea8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1fa      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe4>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fce2 	bl	8000ea8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fcde 	bl	8000ea8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1e6      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x10c>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d063      	beq.n	80015de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d11c      	bne.n	8001568 <HAL_RCC_OscConfig+0x18c>
 800152e:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d116      	bne.n	8001568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x176>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1ba      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4939      	ldr	r1, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	e03a      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x270>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fc97 	bl	8000ea8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fc93 	bl	8000ea8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e19b      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4927      	ldr	r1, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
 80015b0:	e015      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_RCC_OscConfig+0x270>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc76 	bl	8000ea8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc72 	bl	8000ea8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e17a      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d019      	beq.n	8001626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_RCC_OscConfig+0x274>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fc56 	bl	8000ea8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff fc52 	bl	8000ea8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e15a      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_RCC_OscConfig+0x26c>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800161e:	2001      	movs	r0, #1
 8001620:	f000 faa8 	bl	8001b74 <RCC_Delay>
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_RCC_OscConfig+0x274>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fc3c 	bl	8000ea8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001632:	e00f      	b.n	8001654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc38 	bl	8000ea8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d908      	bls.n	8001654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e140      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	42420000 	.word	0x42420000
 8001650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e9      	bne.n	8001634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a6 	beq.w	80017ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b97      	ldr	r3, [pc, #604]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b94      	ldr	r3, [pc, #592]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a93      	ldr	r2, [pc, #588]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b91      	ldr	r3, [pc, #580]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b8e      	ldr	r3, [pc, #568]	; (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a8a      	ldr	r2, [pc, #552]	; (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fbf9 	bl	8000ea8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fbf5 	bl	8000ea8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0fd      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x312>
 80016e0:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a7a      	ldr	r2, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e02d      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x334>
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a75      	ldr	r2, [pc, #468]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a72      	ldr	r2, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x356>
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a6c      	ldr	r2, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a69      	ldr	r2, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x36e>
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a66      	ldr	r2, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a63      	ldr	r2, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fba9 	bl	8000ea8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fba5 	bl	8000ea8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0ab      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x37e>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff fb93 	bl	8000ea8 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fb8f 	bl	8000ea8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e095      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8081 	beq.w	80018c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d061      	beq.n	8001894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d146      	bne.n	8001866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_RCC_OscConfig+0x4fc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb63 	bl	8000ea8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fb5f 	bl	8000ea8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e067      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	492d      	ldr	r1, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a19      	ldr	r1, [r3, #32]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	430b      	orrs	r3, r1
 8001832:	4927      	ldr	r1, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x4fc>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fb33 	bl	8000ea8 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fb2f 	bl	8000ea8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e037      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x46a>
 8001864:	e02f      	b.n	80018c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_RCC_OscConfig+0x4fc>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb1c 	bl	8000ea8 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb18 	bl	8000ea8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e020      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x498>
 8001892:	e018      	b.n	80018c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e013      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40007000 	.word	0x40007000
 80018d8:	42420060 	.word	0x42420060

080018dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0d0      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d910      	bls.n	8001920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	4965      	ldr	r1, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800195a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d040      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d115      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e073      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06b      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4936      	ldr	r1, [pc, #216]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fa6c 	bl	8000ea8 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff fa68 	bl	8000ea8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e053      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d210      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4922      	ldr	r1, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1d0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f9ca 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08005274 	.word	0x08005274
 8001aa8:	20000018 	.word	0x20000018
 8001aac:	2000001c 	.word	0x2000001c

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b490      	push	{r4, r7}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab8:	1d3c      	adds	r4, r7, #4
 8001aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x40>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x46>
 8001aee:	e02d      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af2:	623b      	str	r3, [r7, #32]
      break;
 8001af4:	e02d      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	0c9b      	lsrs	r3, r3, #18
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b02:	4413      	add	r3, r2
 8001b04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c5b      	lsrs	r3, r3, #17
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b22:	4413      	add	r3, r2
 8001b24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b2e:	fb02 f203 	mul.w	r2, r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	e004      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	623b      	str	r3, [r7, #32]
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4e:	623b      	str	r3, [r7, #32]
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6a3b      	ldr	r3, [r7, #32]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc90      	pop	{r4, r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	08002a4c 	.word	0x08002a4c
 8001b64:	08002a5c 	.word	0x08002a5c
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	007a1200 	.word	0x007a1200
 8001b70:	003d0900 	.word	0x003d0900

08001b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <RCC_Delay+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <RCC_Delay+0x38>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b90:	bf00      	nop
  }
  while (Delay --);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <RCC_Delay+0x1c>
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e076      	b.n	8001cb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bd2:	d009      	beq.n	8001be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
 8001bda:	e005      	b.n	8001be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff f824 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	ea42 0103 	orr.w	r1, r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	0c1a      	lsrs	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f002 0204 	and.w	r2, r2, #4
 8001c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_SPI_Transmit+0x22>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e126      	b.n	8001f28 <HAL_SPI_Transmit+0x270>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce2:	f7ff f8e1 	bl	8000ea8 <HAL_GetTick>
 8001ce6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cfc:	e10b      	b.n	8001f16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_SPI_Transmit+0x52>
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d0e:	e102      	b.n	8001f16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2203      	movs	r2, #3
 8001d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d56:	d10f      	bne.n	8001d78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d007      	beq.n	8001d96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d9e:	d14b      	bne.n	8001e38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_SPI_Transmit+0xf6>
 8001da8:	8afb      	ldrh	r3, [r7, #22]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d13e      	bne.n	8001e2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	1c9a      	adds	r2, r3, #2
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dd2:	e02b      	b.n	8001e2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d112      	bne.n	8001e08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	1c9a      	adds	r2, r3, #2
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e06:	e011      	b.n	8001e2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e08:	f7ff f84e 	bl	8000ea8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d803      	bhi.n	8001e20 <HAL_SPI_Transmit+0x168>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d102      	bne.n	8001e26 <HAL_SPI_Transmit+0x16e>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e2a:	e074      	b.n	8001f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ce      	bne.n	8001dd4 <HAL_SPI_Transmit+0x11c>
 8001e36:	e04c      	b.n	8001ed2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_SPI_Transmit+0x18e>
 8001e40:	8afb      	ldrh	r3, [r7, #22]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d140      	bne.n	8001ec8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	330c      	adds	r3, #12
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e6c:	e02c      	b.n	8001ec8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d113      	bne.n	8001ea4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ea2:	e011      	b.n	8001ec8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea4:	f7ff f800 	bl	8000ea8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d803      	bhi.n	8001ebc <HAL_SPI_Transmit+0x204>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d102      	bne.n	8001ec2 <HAL_SPI_Transmit+0x20a>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ec6:	e026      	b.n	8001f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1cd      	bne.n	8001e6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f8b2 	bl	8002040 <SPI_EndRxTxTransaction>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	77fb      	strb	r3, [r7, #31]
 8001f12:	e000      	b.n	8001f16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f40:	f7fe ffb2 	bl	8000ea8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f50:	f7fe ffaa 	bl	8000ea8 <HAL_GetTick>
 8001f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	0d1b      	lsrs	r3, r3, #20
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f66:	e054      	b.n	8002012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6e:	d050      	beq.n	8002012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f70:	f7fe ff9a 	bl	8000ea8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d902      	bls.n	8001f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d13d      	bne.n	8002002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f9e:	d111      	bne.n	8001fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa8:	d004      	beq.n	8001fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d107      	bne.n	8001fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fcc:	d10f      	bne.n	8001fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e017      	b.n	8002032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3b01      	subs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4013      	ands	r3, r2
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	429a      	cmp	r2, r3
 800202e:	d19b      	bne.n	8001f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000018 	.word	0x20000018

08002040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7ff ff6a 	bl	8001f30 <SPI_WaitFlagStateUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0220 	orr.w	r2, r3, #32
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e000      	b.n	8002074 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <__errno>:
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <__errno+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000024 	.word	0x20000024

08002088 <__libc_init_array>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2500      	movs	r5, #0
 800208c:	4e0c      	ldr	r6, [pc, #48]	; (80020c0 <__libc_init_array+0x38>)
 800208e:	4c0d      	ldr	r4, [pc, #52]	; (80020c4 <__libc_init_array+0x3c>)
 8002090:	1ba4      	subs	r4, r4, r6
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	42a5      	cmp	r5, r4
 8002096:	d109      	bne.n	80020ac <__libc_init_array+0x24>
 8002098:	f000 fc34 	bl	8002904 <_init>
 800209c:	2500      	movs	r5, #0
 800209e:	4e0a      	ldr	r6, [pc, #40]	; (80020c8 <__libc_init_array+0x40>)
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <__libc_init_array+0x44>)
 80020a2:	1ba4      	subs	r4, r4, r6
 80020a4:	10a4      	asrs	r4, r4, #2
 80020a6:	42a5      	cmp	r5, r4
 80020a8:	d105      	bne.n	80020b6 <__libc_init_array+0x2e>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b0:	4798      	blx	r3
 80020b2:	3501      	adds	r5, #1
 80020b4:	e7ee      	b.n	8002094 <__libc_init_array+0xc>
 80020b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ba:	4798      	blx	r3
 80020bc:	3501      	adds	r5, #1
 80020be:	e7f2      	b.n	80020a6 <__libc_init_array+0x1e>
 80020c0:	080052b8 	.word	0x080052b8
 80020c4:	080052b8 	.word	0x080052b8
 80020c8:	080052b8 	.word	0x080052b8
 80020cc:	080052bc 	.word	0x080052bc

080020d0 <memset>:
 80020d0:	4603      	mov	r3, r0
 80020d2:	4402      	add	r2, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <memset+0xa>
 80020d8:	4770      	bx	lr
 80020da:	f803 1b01 	strb.w	r1, [r3], #1
 80020de:	e7f9      	b.n	80020d4 <memset+0x4>

080020e0 <siprintf>:
 80020e0:	b40e      	push	{r1, r2, r3}
 80020e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020e6:	b500      	push	{lr}
 80020e8:	b09c      	sub	sp, #112	; 0x70
 80020ea:	ab1d      	add	r3, sp, #116	; 0x74
 80020ec:	9002      	str	r0, [sp, #8]
 80020ee:	9006      	str	r0, [sp, #24]
 80020f0:	9107      	str	r1, [sp, #28]
 80020f2:	9104      	str	r1, [sp, #16]
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <siprintf+0x38>)
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <siprintf+0x3c>)
 80020f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020fc:	9105      	str	r1, [sp, #20]
 80020fe:	6800      	ldr	r0, [r0, #0]
 8002100:	a902      	add	r1, sp, #8
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	f000 f866 	bl	80021d4 <_svfiprintf_r>
 8002108:	2200      	movs	r2, #0
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	b01c      	add	sp, #112	; 0x70
 8002110:	f85d eb04 	ldr.w	lr, [sp], #4
 8002114:	b003      	add	sp, #12
 8002116:	4770      	bx	lr
 8002118:	20000024 	.word	0x20000024
 800211c:	ffff0208 	.word	0xffff0208

08002120 <__ssputs_r>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	688e      	ldr	r6, [r1, #8]
 8002126:	4682      	mov	sl, r0
 8002128:	429e      	cmp	r6, r3
 800212a:	460c      	mov	r4, r1
 800212c:	4690      	mov	r8, r2
 800212e:	4699      	mov	r9, r3
 8002130:	d837      	bhi.n	80021a2 <__ssputs_r+0x82>
 8002132:	898a      	ldrh	r2, [r1, #12]
 8002134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002138:	d031      	beq.n	800219e <__ssputs_r+0x7e>
 800213a:	2302      	movs	r3, #2
 800213c:	6825      	ldr	r5, [r4, #0]
 800213e:	6909      	ldr	r1, [r1, #16]
 8002140:	1a6f      	subs	r7, r5, r1
 8002142:	6965      	ldr	r5, [r4, #20]
 8002144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002148:	fb95 f5f3 	sdiv	r5, r5, r3
 800214c:	f109 0301 	add.w	r3, r9, #1
 8002150:	443b      	add	r3, r7
 8002152:	429d      	cmp	r5, r3
 8002154:	bf38      	it	cc
 8002156:	461d      	movcc	r5, r3
 8002158:	0553      	lsls	r3, r2, #21
 800215a:	d530      	bpl.n	80021be <__ssputs_r+0x9e>
 800215c:	4629      	mov	r1, r5
 800215e:	f000 fb37 	bl	80027d0 <_malloc_r>
 8002162:	4606      	mov	r6, r0
 8002164:	b950      	cbnz	r0, 800217c <__ssputs_r+0x5c>
 8002166:	230c      	movs	r3, #12
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f8ca 3000 	str.w	r3, [sl]
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002176:	81a3      	strh	r3, [r4, #12]
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217c:	463a      	mov	r2, r7
 800217e:	6921      	ldr	r1, [r4, #16]
 8002180:	f000 fab6 	bl	80026f0 <memcpy>
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800218a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218e:	81a3      	strh	r3, [r4, #12]
 8002190:	6126      	str	r6, [r4, #16]
 8002192:	443e      	add	r6, r7
 8002194:	6026      	str	r6, [r4, #0]
 8002196:	464e      	mov	r6, r9
 8002198:	6165      	str	r5, [r4, #20]
 800219a:	1bed      	subs	r5, r5, r7
 800219c:	60a5      	str	r5, [r4, #8]
 800219e:	454e      	cmp	r6, r9
 80021a0:	d900      	bls.n	80021a4 <__ssputs_r+0x84>
 80021a2:	464e      	mov	r6, r9
 80021a4:	4632      	mov	r2, r6
 80021a6:	4641      	mov	r1, r8
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	f000 faac 	bl	8002706 <memmove>
 80021ae:	68a3      	ldr	r3, [r4, #8]
 80021b0:	2000      	movs	r0, #0
 80021b2:	1b9b      	subs	r3, r3, r6
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	441e      	add	r6, r3
 80021ba:	6026      	str	r6, [r4, #0]
 80021bc:	e7dc      	b.n	8002178 <__ssputs_r+0x58>
 80021be:	462a      	mov	r2, r5
 80021c0:	f000 fb60 	bl	8002884 <_realloc_r>
 80021c4:	4606      	mov	r6, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d1e2      	bne.n	8002190 <__ssputs_r+0x70>
 80021ca:	6921      	ldr	r1, [r4, #16]
 80021cc:	4650      	mov	r0, sl
 80021ce:	f000 fab3 	bl	8002738 <_free_r>
 80021d2:	e7c8      	b.n	8002166 <__ssputs_r+0x46>

080021d4 <_svfiprintf_r>:
 80021d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d8:	461d      	mov	r5, r3
 80021da:	898b      	ldrh	r3, [r1, #12]
 80021dc:	b09d      	sub	sp, #116	; 0x74
 80021de:	061f      	lsls	r7, r3, #24
 80021e0:	4680      	mov	r8, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	4616      	mov	r6, r2
 80021e6:	d50f      	bpl.n	8002208 <_svfiprintf_r+0x34>
 80021e8:	690b      	ldr	r3, [r1, #16]
 80021ea:	b96b      	cbnz	r3, 8002208 <_svfiprintf_r+0x34>
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	f000 faef 	bl	80027d0 <_malloc_r>
 80021f2:	6020      	str	r0, [r4, #0]
 80021f4:	6120      	str	r0, [r4, #16]
 80021f6:	b928      	cbnz	r0, 8002204 <_svfiprintf_r+0x30>
 80021f8:	230c      	movs	r3, #12
 80021fa:	f8c8 3000 	str.w	r3, [r8]
 80021fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002202:	e0c8      	b.n	8002396 <_svfiprintf_r+0x1c2>
 8002204:	2340      	movs	r3, #64	; 0x40
 8002206:	6163      	str	r3, [r4, #20]
 8002208:	2300      	movs	r3, #0
 800220a:	9309      	str	r3, [sp, #36]	; 0x24
 800220c:	2320      	movs	r3, #32
 800220e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002212:	2330      	movs	r3, #48	; 0x30
 8002214:	f04f 0b01 	mov.w	fp, #1
 8002218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800221c:	9503      	str	r5, [sp, #12]
 800221e:	4637      	mov	r7, r6
 8002220:	463d      	mov	r5, r7
 8002222:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002226:	b10b      	cbz	r3, 800222c <_svfiprintf_r+0x58>
 8002228:	2b25      	cmp	r3, #37	; 0x25
 800222a:	d13e      	bne.n	80022aa <_svfiprintf_r+0xd6>
 800222c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002230:	d00b      	beq.n	800224a <_svfiprintf_r+0x76>
 8002232:	4653      	mov	r3, sl
 8002234:	4632      	mov	r2, r6
 8002236:	4621      	mov	r1, r4
 8002238:	4640      	mov	r0, r8
 800223a:	f7ff ff71 	bl	8002120 <__ssputs_r>
 800223e:	3001      	adds	r0, #1
 8002240:	f000 80a4 	beq.w	800238c <_svfiprintf_r+0x1b8>
 8002244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002246:	4453      	add	r3, sl
 8002248:	9309      	str	r3, [sp, #36]	; 0x24
 800224a:	783b      	ldrb	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 809d 	beq.w	800238c <_svfiprintf_r+0x1b8>
 8002252:	2300      	movs	r3, #0
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	9307      	str	r3, [sp, #28]
 8002260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002264:	931a      	str	r3, [sp, #104]	; 0x68
 8002266:	462f      	mov	r7, r5
 8002268:	2205      	movs	r2, #5
 800226a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800226e:	4850      	ldr	r0, [pc, #320]	; (80023b0 <_svfiprintf_r+0x1dc>)
 8002270:	f000 fa30 	bl	80026d4 <memchr>
 8002274:	9b04      	ldr	r3, [sp, #16]
 8002276:	b9d0      	cbnz	r0, 80022ae <_svfiprintf_r+0xda>
 8002278:	06d9      	lsls	r1, r3, #27
 800227a:	bf44      	itt	mi
 800227c:	2220      	movmi	r2, #32
 800227e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002282:	071a      	lsls	r2, r3, #28
 8002284:	bf44      	itt	mi
 8002286:	222b      	movmi	r2, #43	; 0x2b
 8002288:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800228c:	782a      	ldrb	r2, [r5, #0]
 800228e:	2a2a      	cmp	r2, #42	; 0x2a
 8002290:	d015      	beq.n	80022be <_svfiprintf_r+0xea>
 8002292:	462f      	mov	r7, r5
 8002294:	2000      	movs	r0, #0
 8002296:	250a      	movs	r5, #10
 8002298:	9a07      	ldr	r2, [sp, #28]
 800229a:	4639      	mov	r1, r7
 800229c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d94d      	bls.n	8002342 <_svfiprintf_r+0x16e>
 80022a6:	b1b8      	cbz	r0, 80022d8 <_svfiprintf_r+0x104>
 80022a8:	e00f      	b.n	80022ca <_svfiprintf_r+0xf6>
 80022aa:	462f      	mov	r7, r5
 80022ac:	e7b8      	b.n	8002220 <_svfiprintf_r+0x4c>
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <_svfiprintf_r+0x1dc>)
 80022b0:	463d      	mov	r5, r7
 80022b2:	1a80      	subs	r0, r0, r2
 80022b4:	fa0b f000 	lsl.w	r0, fp, r0
 80022b8:	4318      	orrs	r0, r3
 80022ba:	9004      	str	r0, [sp, #16]
 80022bc:	e7d3      	b.n	8002266 <_svfiprintf_r+0x92>
 80022be:	9a03      	ldr	r2, [sp, #12]
 80022c0:	1d11      	adds	r1, r2, #4
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	9103      	str	r1, [sp, #12]
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	db01      	blt.n	80022ce <_svfiprintf_r+0xfa>
 80022ca:	9207      	str	r2, [sp, #28]
 80022cc:	e004      	b.n	80022d8 <_svfiprintf_r+0x104>
 80022ce:	4252      	negs	r2, r2
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	9207      	str	r2, [sp, #28]
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	783b      	ldrb	r3, [r7, #0]
 80022da:	2b2e      	cmp	r3, #46	; 0x2e
 80022dc:	d10c      	bne.n	80022f8 <_svfiprintf_r+0x124>
 80022de:	787b      	ldrb	r3, [r7, #1]
 80022e0:	2b2a      	cmp	r3, #42	; 0x2a
 80022e2:	d133      	bne.n	800234c <_svfiprintf_r+0x178>
 80022e4:	9b03      	ldr	r3, [sp, #12]
 80022e6:	3702      	adds	r7, #2
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	9203      	str	r2, [sp, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bfb8      	it	lt
 80022f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	4d2e      	ldr	r5, [pc, #184]	; (80023b4 <_svfiprintf_r+0x1e0>)
 80022fa:	2203      	movs	r2, #3
 80022fc:	7839      	ldrb	r1, [r7, #0]
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 f9e8 	bl	80026d4 <memchr>
 8002304:	b138      	cbz	r0, 8002316 <_svfiprintf_r+0x142>
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	1b40      	subs	r0, r0, r5
 800230a:	fa03 f000 	lsl.w	r0, r3, r0
 800230e:	9b04      	ldr	r3, [sp, #16]
 8002310:	3701      	adds	r7, #1
 8002312:	4303      	orrs	r3, r0
 8002314:	9304      	str	r3, [sp, #16]
 8002316:	7839      	ldrb	r1, [r7, #0]
 8002318:	2206      	movs	r2, #6
 800231a:	4827      	ldr	r0, [pc, #156]	; (80023b8 <_svfiprintf_r+0x1e4>)
 800231c:	1c7e      	adds	r6, r7, #1
 800231e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002322:	f000 f9d7 	bl	80026d4 <memchr>
 8002326:	2800      	cmp	r0, #0
 8002328:	d038      	beq.n	800239c <_svfiprintf_r+0x1c8>
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <_svfiprintf_r+0x1e8>)
 800232c:	bb13      	cbnz	r3, 8002374 <_svfiprintf_r+0x1a0>
 800232e:	9b03      	ldr	r3, [sp, #12]
 8002330:	3307      	adds	r3, #7
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	3308      	adds	r3, #8
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800233c:	444b      	add	r3, r9
 800233e:	9309      	str	r3, [sp, #36]	; 0x24
 8002340:	e76d      	b.n	800221e <_svfiprintf_r+0x4a>
 8002342:	fb05 3202 	mla	r2, r5, r2, r3
 8002346:	2001      	movs	r0, #1
 8002348:	460f      	mov	r7, r1
 800234a:	e7a6      	b.n	800229a <_svfiprintf_r+0xc6>
 800234c:	2300      	movs	r3, #0
 800234e:	250a      	movs	r5, #10
 8002350:	4619      	mov	r1, r3
 8002352:	3701      	adds	r7, #1
 8002354:	9305      	str	r3, [sp, #20]
 8002356:	4638      	mov	r0, r7
 8002358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800235c:	3a30      	subs	r2, #48	; 0x30
 800235e:	2a09      	cmp	r2, #9
 8002360:	d903      	bls.n	800236a <_svfiprintf_r+0x196>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0c8      	beq.n	80022f8 <_svfiprintf_r+0x124>
 8002366:	9105      	str	r1, [sp, #20]
 8002368:	e7c6      	b.n	80022f8 <_svfiprintf_r+0x124>
 800236a:	fb05 2101 	mla	r1, r5, r1, r2
 800236e:	2301      	movs	r3, #1
 8002370:	4607      	mov	r7, r0
 8002372:	e7f0      	b.n	8002356 <_svfiprintf_r+0x182>
 8002374:	ab03      	add	r3, sp, #12
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4622      	mov	r2, r4
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_svfiprintf_r+0x1ec>)
 800237c:	a904      	add	r1, sp, #16
 800237e:	4640      	mov	r0, r8
 8002380:	f3af 8000 	nop.w
 8002384:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002388:	4681      	mov	r9, r0
 800238a:	d1d6      	bne.n	800233a <_svfiprintf_r+0x166>
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	065b      	lsls	r3, r3, #25
 8002390:	f53f af35 	bmi.w	80021fe <_svfiprintf_r+0x2a>
 8002394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002396:	b01d      	add	sp, #116	; 0x74
 8002398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239c:	ab03      	add	r3, sp, #12
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4622      	mov	r2, r4
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_svfiprintf_r+0x1ec>)
 80023a4:	a904      	add	r1, sp, #16
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 f882 	bl	80024b0 <_printf_i>
 80023ac:	e7ea      	b.n	8002384 <_svfiprintf_r+0x1b0>
 80023ae:	bf00      	nop
 80023b0:	08005284 	.word	0x08005284
 80023b4:	0800528a 	.word	0x0800528a
 80023b8:	0800528e 	.word	0x0800528e
 80023bc:	00000000 	.word	0x00000000
 80023c0:	08002121 	.word	0x08002121

080023c4 <_printf_common>:
 80023c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c8:	4691      	mov	r9, r2
 80023ca:	461f      	mov	r7, r3
 80023cc:	688a      	ldr	r2, [r1, #8]
 80023ce:	690b      	ldr	r3, [r1, #16]
 80023d0:	4606      	mov	r6, r0
 80023d2:	4293      	cmp	r3, r2
 80023d4:	bfb8      	it	lt
 80023d6:	4613      	movlt	r3, r2
 80023d8:	f8c9 3000 	str.w	r3, [r9]
 80023dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023e0:	460c      	mov	r4, r1
 80023e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023e6:	b112      	cbz	r2, 80023ee <_printf_common+0x2a>
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8c9 3000 	str.w	r3, [r9]
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	0699      	lsls	r1, r3, #26
 80023f2:	bf42      	ittt	mi
 80023f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023f8:	3302      	addmi	r3, #2
 80023fa:	f8c9 3000 	strmi.w	r3, [r9]
 80023fe:	6825      	ldr	r5, [r4, #0]
 8002400:	f015 0506 	ands.w	r5, r5, #6
 8002404:	d107      	bne.n	8002416 <_printf_common+0x52>
 8002406:	f104 0a19 	add.w	sl, r4, #25
 800240a:	68e3      	ldr	r3, [r4, #12]
 800240c:	f8d9 2000 	ldr.w	r2, [r9]
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	42ab      	cmp	r3, r5
 8002414:	dc29      	bgt.n	800246a <_printf_common+0xa6>
 8002416:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	3300      	adds	r3, #0
 800241e:	bf18      	it	ne
 8002420:	2301      	movne	r3, #1
 8002422:	0692      	lsls	r2, r2, #26
 8002424:	d42e      	bmi.n	8002484 <_printf_common+0xc0>
 8002426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800242a:	4639      	mov	r1, r7
 800242c:	4630      	mov	r0, r6
 800242e:	47c0      	blx	r8
 8002430:	3001      	adds	r0, #1
 8002432:	d021      	beq.n	8002478 <_printf_common+0xb4>
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	68e5      	ldr	r5, [r4, #12]
 8002438:	f003 0306 	and.w	r3, r3, #6
 800243c:	2b04      	cmp	r3, #4
 800243e:	bf18      	it	ne
 8002440:	2500      	movne	r5, #0
 8002442:	f8d9 2000 	ldr.w	r2, [r9]
 8002446:	f04f 0900 	mov.w	r9, #0
 800244a:	bf08      	it	eq
 800244c:	1aad      	subeq	r5, r5, r2
 800244e:	68a3      	ldr	r3, [r4, #8]
 8002450:	6922      	ldr	r2, [r4, #16]
 8002452:	bf08      	it	eq
 8002454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002458:	4293      	cmp	r3, r2
 800245a:	bfc4      	itt	gt
 800245c:	1a9b      	subgt	r3, r3, r2
 800245e:	18ed      	addgt	r5, r5, r3
 8002460:	341a      	adds	r4, #26
 8002462:	454d      	cmp	r5, r9
 8002464:	d11a      	bne.n	800249c <_printf_common+0xd8>
 8002466:	2000      	movs	r0, #0
 8002468:	e008      	b.n	800247c <_printf_common+0xb8>
 800246a:	2301      	movs	r3, #1
 800246c:	4652      	mov	r2, sl
 800246e:	4639      	mov	r1, r7
 8002470:	4630      	mov	r0, r6
 8002472:	47c0      	blx	r8
 8002474:	3001      	adds	r0, #1
 8002476:	d103      	bne.n	8002480 <_printf_common+0xbc>
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002480:	3501      	adds	r5, #1
 8002482:	e7c2      	b.n	800240a <_printf_common+0x46>
 8002484:	2030      	movs	r0, #48	; 0x30
 8002486:	18e1      	adds	r1, r4, r3
 8002488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002492:	4422      	add	r2, r4
 8002494:	3302      	adds	r3, #2
 8002496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800249a:	e7c4      	b.n	8002426 <_printf_common+0x62>
 800249c:	2301      	movs	r3, #1
 800249e:	4622      	mov	r2, r4
 80024a0:	4639      	mov	r1, r7
 80024a2:	4630      	mov	r0, r6
 80024a4:	47c0      	blx	r8
 80024a6:	3001      	adds	r0, #1
 80024a8:	d0e6      	beq.n	8002478 <_printf_common+0xb4>
 80024aa:	f109 0901 	add.w	r9, r9, #1
 80024ae:	e7d8      	b.n	8002462 <_printf_common+0x9e>

080024b0 <_printf_i>:
 80024b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80024b8:	460c      	mov	r4, r1
 80024ba:	7e09      	ldrb	r1, [r1, #24]
 80024bc:	b085      	sub	sp, #20
 80024be:	296e      	cmp	r1, #110	; 0x6e
 80024c0:	4617      	mov	r7, r2
 80024c2:	4606      	mov	r6, r0
 80024c4:	4698      	mov	r8, r3
 80024c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024c8:	f000 80b3 	beq.w	8002632 <_printf_i+0x182>
 80024cc:	d822      	bhi.n	8002514 <_printf_i+0x64>
 80024ce:	2963      	cmp	r1, #99	; 0x63
 80024d0:	d036      	beq.n	8002540 <_printf_i+0x90>
 80024d2:	d80a      	bhi.n	80024ea <_printf_i+0x3a>
 80024d4:	2900      	cmp	r1, #0
 80024d6:	f000 80b9 	beq.w	800264c <_printf_i+0x19c>
 80024da:	2958      	cmp	r1, #88	; 0x58
 80024dc:	f000 8083 	beq.w	80025e6 <_printf_i+0x136>
 80024e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80024e8:	e032      	b.n	8002550 <_printf_i+0xa0>
 80024ea:	2964      	cmp	r1, #100	; 0x64
 80024ec:	d001      	beq.n	80024f2 <_printf_i+0x42>
 80024ee:	2969      	cmp	r1, #105	; 0x69
 80024f0:	d1f6      	bne.n	80024e0 <_printf_i+0x30>
 80024f2:	6820      	ldr	r0, [r4, #0]
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	0605      	lsls	r5, r0, #24
 80024f8:	f103 0104 	add.w	r1, r3, #4
 80024fc:	d52a      	bpl.n	8002554 <_printf_i+0xa4>
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	da03      	bge.n	800250e <_printf_i+0x5e>
 8002506:	222d      	movs	r2, #45	; 0x2d
 8002508:	425b      	negs	r3, r3
 800250a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800250e:	486f      	ldr	r0, [pc, #444]	; (80026cc <_printf_i+0x21c>)
 8002510:	220a      	movs	r2, #10
 8002512:	e039      	b.n	8002588 <_printf_i+0xd8>
 8002514:	2973      	cmp	r1, #115	; 0x73
 8002516:	f000 809d 	beq.w	8002654 <_printf_i+0x1a4>
 800251a:	d808      	bhi.n	800252e <_printf_i+0x7e>
 800251c:	296f      	cmp	r1, #111	; 0x6f
 800251e:	d020      	beq.n	8002562 <_printf_i+0xb2>
 8002520:	2970      	cmp	r1, #112	; 0x70
 8002522:	d1dd      	bne.n	80024e0 <_printf_i+0x30>
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	e003      	b.n	8002536 <_printf_i+0x86>
 800252e:	2975      	cmp	r1, #117	; 0x75
 8002530:	d017      	beq.n	8002562 <_printf_i+0xb2>
 8002532:	2978      	cmp	r1, #120	; 0x78
 8002534:	d1d4      	bne.n	80024e0 <_printf_i+0x30>
 8002536:	2378      	movs	r3, #120	; 0x78
 8002538:	4865      	ldr	r0, [pc, #404]	; (80026d0 <_printf_i+0x220>)
 800253a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800253e:	e055      	b.n	80025ec <_printf_i+0x13c>
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002546:	1d19      	adds	r1, r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6011      	str	r1, [r2, #0]
 800254c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002550:	2301      	movs	r3, #1
 8002552:	e08c      	b.n	800266e <_printf_i+0x1be>
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800255a:	6011      	str	r1, [r2, #0]
 800255c:	bf18      	it	ne
 800255e:	b21b      	sxthne	r3, r3
 8002560:	e7cf      	b.n	8002502 <_printf_i+0x52>
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	6825      	ldr	r5, [r4, #0]
 8002566:	1d18      	adds	r0, r3, #4
 8002568:	6010      	str	r0, [r2, #0]
 800256a:	0628      	lsls	r0, r5, #24
 800256c:	d501      	bpl.n	8002572 <_printf_i+0xc2>
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e002      	b.n	8002578 <_printf_i+0xc8>
 8002572:	0668      	lsls	r0, r5, #25
 8002574:	d5fb      	bpl.n	800256e <_printf_i+0xbe>
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	296f      	cmp	r1, #111	; 0x6f
 800257a:	bf14      	ite	ne
 800257c:	220a      	movne	r2, #10
 800257e:	2208      	moveq	r2, #8
 8002580:	4852      	ldr	r0, [pc, #328]	; (80026cc <_printf_i+0x21c>)
 8002582:	2100      	movs	r1, #0
 8002584:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002588:	6865      	ldr	r5, [r4, #4]
 800258a:	2d00      	cmp	r5, #0
 800258c:	60a5      	str	r5, [r4, #8]
 800258e:	f2c0 8095 	blt.w	80026bc <_printf_i+0x20c>
 8002592:	6821      	ldr	r1, [r4, #0]
 8002594:	f021 0104 	bic.w	r1, r1, #4
 8002598:	6021      	str	r1, [r4, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d13d      	bne.n	800261a <_printf_i+0x16a>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	f040 808e 	bne.w	80026c0 <_printf_i+0x210>
 80025a4:	4665      	mov	r5, ip
 80025a6:	2a08      	cmp	r2, #8
 80025a8:	d10b      	bne.n	80025c2 <_printf_i+0x112>
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	07db      	lsls	r3, r3, #31
 80025ae:	d508      	bpl.n	80025c2 <_printf_i+0x112>
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	6862      	ldr	r2, [r4, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	bfde      	ittt	le
 80025b8:	2330      	movle	r3, #48	; 0x30
 80025ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025c2:	ebac 0305 	sub.w	r3, ip, r5
 80025c6:	6123      	str	r3, [r4, #16]
 80025c8:	f8cd 8000 	str.w	r8, [sp]
 80025cc:	463b      	mov	r3, r7
 80025ce:	aa03      	add	r2, sp, #12
 80025d0:	4621      	mov	r1, r4
 80025d2:	4630      	mov	r0, r6
 80025d4:	f7ff fef6 	bl	80023c4 <_printf_common>
 80025d8:	3001      	adds	r0, #1
 80025da:	d14d      	bne.n	8002678 <_printf_i+0x1c8>
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	b005      	add	sp, #20
 80025e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025e6:	4839      	ldr	r0, [pc, #228]	; (80026cc <_printf_i+0x21c>)
 80025e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	6821      	ldr	r1, [r4, #0]
 80025f0:	1d1d      	adds	r5, r3, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6015      	str	r5, [r2, #0]
 80025f6:	060a      	lsls	r2, r1, #24
 80025f8:	d50b      	bpl.n	8002612 <_printf_i+0x162>
 80025fa:	07ca      	lsls	r2, r1, #31
 80025fc:	bf44      	itt	mi
 80025fe:	f041 0120 	orrmi.w	r1, r1, #32
 8002602:	6021      	strmi	r1, [r4, #0]
 8002604:	b91b      	cbnz	r3, 800260e <_printf_i+0x15e>
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	f022 0220 	bic.w	r2, r2, #32
 800260c:	6022      	str	r2, [r4, #0]
 800260e:	2210      	movs	r2, #16
 8002610:	e7b7      	b.n	8002582 <_printf_i+0xd2>
 8002612:	064d      	lsls	r5, r1, #25
 8002614:	bf48      	it	mi
 8002616:	b29b      	uxthmi	r3, r3
 8002618:	e7ef      	b.n	80025fa <_printf_i+0x14a>
 800261a:	4665      	mov	r5, ip
 800261c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002620:	fb02 3311 	mls	r3, r2, r1, r3
 8002624:	5cc3      	ldrb	r3, [r0, r3]
 8002626:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800262a:	460b      	mov	r3, r1
 800262c:	2900      	cmp	r1, #0
 800262e:	d1f5      	bne.n	800261c <_printf_i+0x16c>
 8002630:	e7b9      	b.n	80025a6 <_printf_i+0xf6>
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	6825      	ldr	r5, [r4, #0]
 8002636:	1d18      	adds	r0, r3, #4
 8002638:	6961      	ldr	r1, [r4, #20]
 800263a:	6010      	str	r0, [r2, #0]
 800263c:	0628      	lsls	r0, r5, #24
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	d501      	bpl.n	8002646 <_printf_i+0x196>
 8002642:	6019      	str	r1, [r3, #0]
 8002644:	e002      	b.n	800264c <_printf_i+0x19c>
 8002646:	066a      	lsls	r2, r5, #25
 8002648:	d5fb      	bpl.n	8002642 <_printf_i+0x192>
 800264a:	8019      	strh	r1, [r3, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	4665      	mov	r5, ip
 8002650:	6123      	str	r3, [r4, #16]
 8002652:	e7b9      	b.n	80025c8 <_printf_i+0x118>
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	1d19      	adds	r1, r3, #4
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	681d      	ldr	r5, [r3, #0]
 800265c:	6862      	ldr	r2, [r4, #4]
 800265e:	2100      	movs	r1, #0
 8002660:	4628      	mov	r0, r5
 8002662:	f000 f837 	bl	80026d4 <memchr>
 8002666:	b108      	cbz	r0, 800266c <_printf_i+0x1bc>
 8002668:	1b40      	subs	r0, r0, r5
 800266a:	6060      	str	r0, [r4, #4]
 800266c:	6863      	ldr	r3, [r4, #4]
 800266e:	6123      	str	r3, [r4, #16]
 8002670:	2300      	movs	r3, #0
 8002672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002676:	e7a7      	b.n	80025c8 <_printf_i+0x118>
 8002678:	6923      	ldr	r3, [r4, #16]
 800267a:	462a      	mov	r2, r5
 800267c:	4639      	mov	r1, r7
 800267e:	4630      	mov	r0, r6
 8002680:	47c0      	blx	r8
 8002682:	3001      	adds	r0, #1
 8002684:	d0aa      	beq.n	80025dc <_printf_i+0x12c>
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	079b      	lsls	r3, r3, #30
 800268a:	d413      	bmi.n	80026b4 <_printf_i+0x204>
 800268c:	68e0      	ldr	r0, [r4, #12]
 800268e:	9b03      	ldr	r3, [sp, #12]
 8002690:	4298      	cmp	r0, r3
 8002692:	bfb8      	it	lt
 8002694:	4618      	movlt	r0, r3
 8002696:	e7a3      	b.n	80025e0 <_printf_i+0x130>
 8002698:	2301      	movs	r3, #1
 800269a:	464a      	mov	r2, r9
 800269c:	4639      	mov	r1, r7
 800269e:	4630      	mov	r0, r6
 80026a0:	47c0      	blx	r8
 80026a2:	3001      	adds	r0, #1
 80026a4:	d09a      	beq.n	80025dc <_printf_i+0x12c>
 80026a6:	3501      	adds	r5, #1
 80026a8:	68e3      	ldr	r3, [r4, #12]
 80026aa:	9a03      	ldr	r2, [sp, #12]
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	42ab      	cmp	r3, r5
 80026b0:	dcf2      	bgt.n	8002698 <_printf_i+0x1e8>
 80026b2:	e7eb      	b.n	800268c <_printf_i+0x1dc>
 80026b4:	2500      	movs	r5, #0
 80026b6:	f104 0919 	add.w	r9, r4, #25
 80026ba:	e7f5      	b.n	80026a8 <_printf_i+0x1f8>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ac      	bne.n	800261a <_printf_i+0x16a>
 80026c0:	7803      	ldrb	r3, [r0, #0]
 80026c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026ca:	e76c      	b.n	80025a6 <_printf_i+0xf6>
 80026cc:	08005295 	.word	0x08005295
 80026d0:	080052a6 	.word	0x080052a6

080026d4 <memchr>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	b2c9      	uxtb	r1, r1
 80026d8:	4402      	add	r2, r0
 80026da:	4290      	cmp	r0, r2
 80026dc:	4603      	mov	r3, r0
 80026de:	d101      	bne.n	80026e4 <memchr+0x10>
 80026e0:	2300      	movs	r3, #0
 80026e2:	e003      	b.n	80026ec <memchr+0x18>
 80026e4:	781c      	ldrb	r4, [r3, #0]
 80026e6:	3001      	adds	r0, #1
 80026e8:	428c      	cmp	r4, r1
 80026ea:	d1f6      	bne.n	80026da <memchr+0x6>
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <memcpy>:
 80026f0:	b510      	push	{r4, lr}
 80026f2:	1e43      	subs	r3, r0, #1
 80026f4:	440a      	add	r2, r1
 80026f6:	4291      	cmp	r1, r2
 80026f8:	d100      	bne.n	80026fc <memcpy+0xc>
 80026fa:	bd10      	pop	{r4, pc}
 80026fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002704:	e7f7      	b.n	80026f6 <memcpy+0x6>

08002706 <memmove>:
 8002706:	4288      	cmp	r0, r1
 8002708:	b510      	push	{r4, lr}
 800270a:	eb01 0302 	add.w	r3, r1, r2
 800270e:	d807      	bhi.n	8002720 <memmove+0x1a>
 8002710:	1e42      	subs	r2, r0, #1
 8002712:	4299      	cmp	r1, r3
 8002714:	d00a      	beq.n	800272c <memmove+0x26>
 8002716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800271a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800271e:	e7f8      	b.n	8002712 <memmove+0xc>
 8002720:	4283      	cmp	r3, r0
 8002722:	d9f5      	bls.n	8002710 <memmove+0xa>
 8002724:	1881      	adds	r1, r0, r2
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	42d3      	cmn	r3, r2
 800272a:	d100      	bne.n	800272e <memmove+0x28>
 800272c:	bd10      	pop	{r4, pc}
 800272e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002732:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002736:	e7f7      	b.n	8002728 <memmove+0x22>

08002738 <_free_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4605      	mov	r5, r0
 800273c:	2900      	cmp	r1, #0
 800273e:	d043      	beq.n	80027c8 <_free_r+0x90>
 8002740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002744:	1f0c      	subs	r4, r1, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	bfb8      	it	lt
 800274a:	18e4      	addlt	r4, r4, r3
 800274c:	f000 f8d0 	bl	80028f0 <__malloc_lock>
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <_free_r+0x94>)
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	4610      	mov	r0, r2
 8002756:	b933      	cbnz	r3, 8002766 <_free_r+0x2e>
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	6014      	str	r4, [r2, #0]
 800275c:	4628      	mov	r0, r5
 800275e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002762:	f000 b8c6 	b.w	80028f2 <__malloc_unlock>
 8002766:	42a3      	cmp	r3, r4
 8002768:	d90b      	bls.n	8002782 <_free_r+0x4a>
 800276a:	6821      	ldr	r1, [r4, #0]
 800276c:	1862      	adds	r2, r4, r1
 800276e:	4293      	cmp	r3, r2
 8002770:	bf01      	itttt	eq
 8002772:	681a      	ldreq	r2, [r3, #0]
 8002774:	685b      	ldreq	r3, [r3, #4]
 8002776:	1852      	addeq	r2, r2, r1
 8002778:	6022      	streq	r2, [r4, #0]
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	6004      	str	r4, [r0, #0]
 800277e:	e7ed      	b.n	800275c <_free_r+0x24>
 8002780:	4613      	mov	r3, r2
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	b10a      	cbz	r2, 800278a <_free_r+0x52>
 8002786:	42a2      	cmp	r2, r4
 8002788:	d9fa      	bls.n	8002780 <_free_r+0x48>
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	1858      	adds	r0, r3, r1
 800278e:	42a0      	cmp	r0, r4
 8002790:	d10b      	bne.n	80027aa <_free_r+0x72>
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	4401      	add	r1, r0
 8002796:	1858      	adds	r0, r3, r1
 8002798:	4282      	cmp	r2, r0
 800279a:	6019      	str	r1, [r3, #0]
 800279c:	d1de      	bne.n	800275c <_free_r+0x24>
 800279e:	6810      	ldr	r0, [r2, #0]
 80027a0:	6852      	ldr	r2, [r2, #4]
 80027a2:	4401      	add	r1, r0
 80027a4:	6019      	str	r1, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	e7d8      	b.n	800275c <_free_r+0x24>
 80027aa:	d902      	bls.n	80027b2 <_free_r+0x7a>
 80027ac:	230c      	movs	r3, #12
 80027ae:	602b      	str	r3, [r5, #0]
 80027b0:	e7d4      	b.n	800275c <_free_r+0x24>
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	1821      	adds	r1, r4, r0
 80027b6:	428a      	cmp	r2, r1
 80027b8:	bf01      	itttt	eq
 80027ba:	6811      	ldreq	r1, [r2, #0]
 80027bc:	6852      	ldreq	r2, [r2, #4]
 80027be:	1809      	addeq	r1, r1, r0
 80027c0:	6021      	streq	r1, [r4, #0]
 80027c2:	6062      	str	r2, [r4, #4]
 80027c4:	605c      	str	r4, [r3, #4]
 80027c6:	e7c9      	b.n	800275c <_free_r+0x24>
 80027c8:	bd38      	pop	{r3, r4, r5, pc}
 80027ca:	bf00      	nop
 80027cc:	200000ac 	.word	0x200000ac

080027d0 <_malloc_r>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	1ccd      	adds	r5, r1, #3
 80027d4:	f025 0503 	bic.w	r5, r5, #3
 80027d8:	3508      	adds	r5, #8
 80027da:	2d0c      	cmp	r5, #12
 80027dc:	bf38      	it	cc
 80027de:	250c      	movcc	r5, #12
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	4606      	mov	r6, r0
 80027e4:	db01      	blt.n	80027ea <_malloc_r+0x1a>
 80027e6:	42a9      	cmp	r1, r5
 80027e8:	d903      	bls.n	80027f2 <_malloc_r+0x22>
 80027ea:	230c      	movs	r3, #12
 80027ec:	6033      	str	r3, [r6, #0]
 80027ee:	2000      	movs	r0, #0
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
 80027f2:	f000 f87d 	bl	80028f0 <__malloc_lock>
 80027f6:	4a21      	ldr	r2, [pc, #132]	; (800287c <_malloc_r+0xac>)
 80027f8:	6814      	ldr	r4, [r2, #0]
 80027fa:	4621      	mov	r1, r4
 80027fc:	b991      	cbnz	r1, 8002824 <_malloc_r+0x54>
 80027fe:	4c20      	ldr	r4, [pc, #128]	; (8002880 <_malloc_r+0xb0>)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	b91b      	cbnz	r3, 800280c <_malloc_r+0x3c>
 8002804:	4630      	mov	r0, r6
 8002806:	f000 f863 	bl	80028d0 <_sbrk_r>
 800280a:	6020      	str	r0, [r4, #0]
 800280c:	4629      	mov	r1, r5
 800280e:	4630      	mov	r0, r6
 8002810:	f000 f85e 	bl	80028d0 <_sbrk_r>
 8002814:	1c43      	adds	r3, r0, #1
 8002816:	d124      	bne.n	8002862 <_malloc_r+0x92>
 8002818:	230c      	movs	r3, #12
 800281a:	4630      	mov	r0, r6
 800281c:	6033      	str	r3, [r6, #0]
 800281e:	f000 f868 	bl	80028f2 <__malloc_unlock>
 8002822:	e7e4      	b.n	80027ee <_malloc_r+0x1e>
 8002824:	680b      	ldr	r3, [r1, #0]
 8002826:	1b5b      	subs	r3, r3, r5
 8002828:	d418      	bmi.n	800285c <_malloc_r+0x8c>
 800282a:	2b0b      	cmp	r3, #11
 800282c:	d90f      	bls.n	800284e <_malloc_r+0x7e>
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	18cc      	adds	r4, r1, r3
 8002832:	50cd      	str	r5, [r1, r3]
 8002834:	4630      	mov	r0, r6
 8002836:	f000 f85c 	bl	80028f2 <__malloc_unlock>
 800283a:	f104 000b 	add.w	r0, r4, #11
 800283e:	1d23      	adds	r3, r4, #4
 8002840:	f020 0007 	bic.w	r0, r0, #7
 8002844:	1ac3      	subs	r3, r0, r3
 8002846:	d0d3      	beq.n	80027f0 <_malloc_r+0x20>
 8002848:	425a      	negs	r2, r3
 800284a:	50e2      	str	r2, [r4, r3]
 800284c:	e7d0      	b.n	80027f0 <_malloc_r+0x20>
 800284e:	684b      	ldr	r3, [r1, #4]
 8002850:	428c      	cmp	r4, r1
 8002852:	bf16      	itet	ne
 8002854:	6063      	strne	r3, [r4, #4]
 8002856:	6013      	streq	r3, [r2, #0]
 8002858:	460c      	movne	r4, r1
 800285a:	e7eb      	b.n	8002834 <_malloc_r+0x64>
 800285c:	460c      	mov	r4, r1
 800285e:	6849      	ldr	r1, [r1, #4]
 8002860:	e7cc      	b.n	80027fc <_malloc_r+0x2c>
 8002862:	1cc4      	adds	r4, r0, #3
 8002864:	f024 0403 	bic.w	r4, r4, #3
 8002868:	42a0      	cmp	r0, r4
 800286a:	d005      	beq.n	8002878 <_malloc_r+0xa8>
 800286c:	1a21      	subs	r1, r4, r0
 800286e:	4630      	mov	r0, r6
 8002870:	f000 f82e 	bl	80028d0 <_sbrk_r>
 8002874:	3001      	adds	r0, #1
 8002876:	d0cf      	beq.n	8002818 <_malloc_r+0x48>
 8002878:	6025      	str	r5, [r4, #0]
 800287a:	e7db      	b.n	8002834 <_malloc_r+0x64>
 800287c:	200000ac 	.word	0x200000ac
 8002880:	200000b0 	.word	0x200000b0

08002884 <_realloc_r>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4607      	mov	r7, r0
 8002888:	4614      	mov	r4, r2
 800288a:	460e      	mov	r6, r1
 800288c:	b921      	cbnz	r1, 8002898 <_realloc_r+0x14>
 800288e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002892:	4611      	mov	r1, r2
 8002894:	f7ff bf9c 	b.w	80027d0 <_malloc_r>
 8002898:	b922      	cbnz	r2, 80028a4 <_realloc_r+0x20>
 800289a:	f7ff ff4d 	bl	8002738 <_free_r>
 800289e:	4625      	mov	r5, r4
 80028a0:	4628      	mov	r0, r5
 80028a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a4:	f000 f826 	bl	80028f4 <_malloc_usable_size_r>
 80028a8:	42a0      	cmp	r0, r4
 80028aa:	d20f      	bcs.n	80028cc <_realloc_r+0x48>
 80028ac:	4621      	mov	r1, r4
 80028ae:	4638      	mov	r0, r7
 80028b0:	f7ff ff8e 	bl	80027d0 <_malloc_r>
 80028b4:	4605      	mov	r5, r0
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d0f2      	beq.n	80028a0 <_realloc_r+0x1c>
 80028ba:	4631      	mov	r1, r6
 80028bc:	4622      	mov	r2, r4
 80028be:	f7ff ff17 	bl	80026f0 <memcpy>
 80028c2:	4631      	mov	r1, r6
 80028c4:	4638      	mov	r0, r7
 80028c6:	f7ff ff37 	bl	8002738 <_free_r>
 80028ca:	e7e9      	b.n	80028a0 <_realloc_r+0x1c>
 80028cc:	4635      	mov	r5, r6
 80028ce:	e7e7      	b.n	80028a0 <_realloc_r+0x1c>

080028d0 <_sbrk_r>:
 80028d0:	b538      	push	{r3, r4, r5, lr}
 80028d2:	2300      	movs	r3, #0
 80028d4:	4c05      	ldr	r4, [pc, #20]	; (80028ec <_sbrk_r+0x1c>)
 80028d6:	4605      	mov	r5, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	f7fe fa2a 	bl	8000d34 <_sbrk>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_sbrk_r+0x1a>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_sbrk_r+0x1a>
 80028e8:	602b      	str	r3, [r5, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	20000110 	.word	0x20000110

080028f0 <__malloc_lock>:
 80028f0:	4770      	bx	lr

080028f2 <__malloc_unlock>:
 80028f2:	4770      	bx	lr

080028f4 <_malloc_usable_size_r>:
 80028f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f8:	1f18      	subs	r0, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bfbc      	itt	lt
 80028fe:	580b      	ldrlt	r3, [r1, r0]
 8002900:	18c0      	addlt	r0, r0, r3
 8002902:	4770      	bx	lr

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
